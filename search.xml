<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>结束了</title>
    <url>/p/5550ac4b.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="851a8faaa885f21ce7aacd1d2eca47d07bebf7ceb3236e8a693b9307b7212764">f4cc23558ba95030556638b09840cfb7e9092316c5dd8c4c041392241e350a42745c97055514e527e18486e7a911fd431ff93268528897a96e46e4005e5473b928b37fe03de4c02b7d345b55873ddd2bfbf760c543d6b12a1e2f80fd163467f75ef4c72a74f7e931a71b2018344726dbab00483a09697c4cfe916e554fc2baf165c146770706f31057c740f42eda7c9c91a971b7903c5c2c273d019d456fc63b8296e094a0201e603b83281369f6a7b397238c81b3dd6f883432b0ffb897af142dd38f44f8256158bd60ca8fdb855c99137fb2be0b4974129276f36ec1f1f9ee04d7b4cbed56063305155dc974cd6e0b43e71ffbf068be6625af4a5906edfb53e52c857e052e059bb50f905b90dba3f0cb40d6dc874fdbbd6a6b8cf0dab72deada8191ed468f3b10e088e8350f3670176cbbc914668df8f1d1c5c8d5f3436bb0aacc03e9c7bc72e88f61b42048d2a549dcc3d5f703aab0d68bbab84d9a6eaa14082b0c2badf993c5d9c74c9ea2daf0840ec7e9b8cfb6bfd4a9d87670b0a41457ff6b283fd3e1557ad1e2ae4465965e7573c454b5e68d769af01220dbba320ce4b6d530948b42b7557c852e2e807d280d831508ab58f69304b9a6d719e8fc2a7f6995dd52067749c39372730e81b7ed04e88ba6ba9f707c0540df7ba947c7c9da4fd45b8e209f080c0ad46fe660756bcbe37511b2365328167bbf7de66c27a2555cc78a6cb34f112c7405444c1f30bdde78466ad9a458d44b6ac3fee87578d41e2e601062afa790c2abd4271675be7872799ac28f7cb9378674b034d43a9bb81e5e11d390d067a51df62d8a65ed9b781cf2136d09a0221a70a7e10d65d2cac4770338017fd61bc5848a6f685426cada162c147abe20762e6d1fb7d26582b00b289c9c647af59c24870dd7429edd0aa230f55bbefe02aa04420bca5e36e7a996249f56774fc65bfccc2ca56b4ea161c340f7ca1fbf3dfda060eaceb6d199df28e8ab7804d7527da0b87bb6a39e1efa290ba5501edd02d0cdf5d91a7aec7c8007e4635416aca059f2f20adeba2d86a978f54feb9466de91756aa4d1a94d073377e6c563255f1b8658fa755f8c11f44ba04a83b5d18a8561976526527e5f413d285ddefba02657b20cc560db187e0eef81dde282e3518c9b90a8774d940c58607618989fd013df416c8593b774cae215a7a0e18908bf95309c1160a92313de257327efb6edfc60f12edeb43f93f47961e24577a14a8419ab2efc07e00f495dcae071b495d5d92fcb6d1177d75533b8d3258d939f29c16f3d2c84b1e1ececb5a271a5d22e0628a3fb772d35dbbc8efc675e32669fa499140c0b12959b0389e3052cfc3e693a4963c0f81f7aa9db396137de4ec58077ab1c5a856175b54f13c09c8d0d15d5d9ea12d3d365591bccfe4aae2322bb8432bf675881d5c65407da4720b3e2dade03a0f312a09ff7b276145032a782005556f3520aba1bd43a54497b95973dd5241baa5c69bc086dbe8c8be9374f3a3511b2e910c606a672d2c4bd8c7ae7e326f997b67da3fbc41e66598e7d4526057971ccf8a0d7c9d1dbbfda96abcab763238efbd2dc7fa6a939632c1e7a72abc1bf4092f37e88acd13db9ac30c746f06d825548dd5e771bed7206950f8b956a639d60a0538de8d8d3e51743682c72ecbcfa762a005806158ff40270991e3d997c46d8d6723f469340ee6977d33da0310f50714b482b8effaf7b3ffdf831f756089f091cfef5c673128285ac31f2ea8fbb393db8c36319a1131d5e64074df2b5f8c11a4679b98229ec744849b1308a009fbba4f317c8ae9ca5bc8ec5694d37eeed63e1860809c0d83dd57a609c50fbd62504fadd65c3b61ff22e111a0a4a57399a00375d08cf16f2cc0156ca7f895ec32be63a3d11e83c7dffe9e0df92fbeebb3e7922b47758ceb4823af7d19649c5e875528631330c9720481e627a3b635373d1c68993cfda764447ba46ca28d731e6070c0698c8e6c1476c24677a02ec9beb4e3d18a62f536945e98ac022b4d8819a8b25c670d2b5d86e59f475790d6637472fc00342e38c4fe5f4f0aabe8f2dea1d85c3792a5771b97731825d159456682f39fbec871c313deca3bc769aedc6afffaf1bb516083658977f5df96a38bb9e3eba7f2ecad4251e5164f35e3bba78de790e5af49cf3b836de0f41a786a1bbff5ee389e6c9705389e5743077b2e7d48a8e8396250421a6a7b7225ca12e207c6a86bd7e57038a3b54b2977c62f3a703fd349f4ec9387bac97c4d142abd615ff77956b27d5046f6679f50b69ae7c157bbec607f886a41d39f2671e9512c13ad35ae4735de8e614cdbaa334d15b19c1858d1775823fdb98bb7a902487e7ce54a51354c4735e4bfbaceb093fc5d65e16d8bc08a0468a8348b629c94e6bd07053f3ff27f642e263e5b57ae9af65e9b2e7ea0df81ccf378e834a4170de3c4c9fb6c213bcc7cde214704af20dc82a2c0e52d33ca4a7677ca472d866f6f8f0edde47343d5f37354db67e5dfdcd690f358da451d04417579077529e98884f889ec6c258d924a5ccedc0dfdaee00ad37161445653507775a3bdf1cf645247f917f9eb8d9003f95f99df214c0460ee60bc022bf38402aca0a46e0339e9e48c6d3987874df8ecf59aa5cc80d764db64afc50552aa7e664c32bdd34484ab6dd0edeeb5fcc5ed60e3acb971cabbca07dda31f89d73ab70b0ecb3f85b640cbc819d5a66d124569c1fbe31afbc8ea0dc205c600ca560efa78ced8749de49033e622b50ca9d33683724274ceadf589e4639497b3fa06062603f9e0453d36ee05c1deb24c5d3a0aae5f6f544985c902743518143e6dbb6a09d54e885c66c314eaf59b75dab652378644b4d6958e997ec3ff9bf7574bba7262303e43c44f59487362cbf839a77065c4e4733c133e84557dd997ec39b9697db744e3d09c60f30571fe91e8dc9fdb52099befaa719f2271625f7ccc55a1ce0cdfd2fe5d945557bddc7774acdaba12a6f37a19cbe33d8aed6c783186587c00405dae7fbade5b321bcfa0c22c49fb504a0865f2552277cf060d7a2a5195e4b63609c088952b808c5a83f2f601958ec5f442a873e5510f81816983efc9c25f9c4ccab2b736372c37fc0b1231b65387f4417104cc698aed7a71ad6081a76c56cb17fd097e3d6358e8b360ba91df885de609923c66eef1b7479dd3921af6cc831d4d02da6d8d860162f348eeb3926a478598a5f9fd2dc6c1611aec1d52cacee1e1877b894aa2306a1b696082ec8f8755abd4462cd3015dd1fea7af7cba8c28ed2f0a804ed0efa2b4dc776c396a89421d24751879ec76580672fa981cf20b4bc6204e2d67566603b070eefebbb2fa90b3b2d6ba094841d3f919f451dc44e8378ce43ccfe42792f2de5331b68b332006862c531a26ff47e8824818f4dcb97f218d2b00fdd8a06eb8e5d5497b2770b51a238ca4819ab4a120c84d4afa3b8243893511d54d67e1528d5e9e77df360ccd8070cd0609efe4bc493f5c082bbe700a1608a2942d84c2440bc22d4630fa0b4f8a47e6b3ec5f7c339579f674bfc39d772fca961cb39df692d5e0a13b6ae0ca67278e82266d629636483e6a122681339d256ed2f72db50b1b013cd8429a62f0ffcabc9be0671d5399af1a007c6f3c0046c985eab6f4c2941ecb513e3c9e8c1bcc8630492ca4b00cf3a040a66ee5eca4aa85976938b6134fe7376256da6203f9a4c74ada5c1b28da82a99e65789bcb6d346e6729223e3c9b07195771b62623601b2b90df72550b4d7d03056144beaa851b41f7bcf616d41c8ed7359ebb9a1bb99721c18313a48f9cf082ba18e7ef4ba12438a96d06e3025e4d6c27f0ac72aa1264fe3ec369edcb7970a7e290206946dac564d84c017699b5b4f15bd08bd8bb630c809b3659e804e83a45ad52d0906d677657c0734fa58769ef30f678101dea675e3116af1b521b391aa090a5303f2a4deb2873623ef3ca2213f48b5fe08531fb315cdab5a70ea6b4755cf34baa64bb3d3a09f3f8a60ed6c31b4a7facabb57952809069eeb027b2dc1af70c5c0ef3fa37a63582951b3b8f69d75e801f7cbfa72fac80a77934d6d96e51653a396717b4c6f49eba5bf4596388e87c439912fe217865732d50adf91f0dbdfb7c9d57f88b77d48453e14dba3bfb85dbfde24c3989f3ffcdc24932bc0d1483b3c2c7fbdc47c6163aee1b4025f9b259ef9228e4865022cbd00586cce3fb8a5291363bc9e1d2daef2d515e55eb170475986c833fc047d8e7140242a80fb34ba1fdb76525959bd23c80b8a58794e82f6</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">密码输入框上描述性内容</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>任意模数NTT</title>
    <url>/p/dccbe9f5.html</url>
    <content><![CDATA[<p> NTT优缺点：</p>
<p> <strong>能取模</strong><br><del>FFT的复数你给我来取个模</del></p>
<p><strong>没有精度差</strong><br>FFT浮点数的精度怎么也会出一点问题</p>
<p><strong>一般来说常数小</strong><br>由于均为整数操作（虽然取模多）<br><del>NTT常数小，通常比一大堆浮点运算的FFT要快</del>(通常嘛）</p>
<p>教程和板子网上都有，就不仔细写了</p>
<p>讲一下任意模数NTT</p>
<p>众所周知，为了满足单位根的性质，$NTT$需要质数模数，而且需要质数模数能写成<br>$p=a*2^k+1$的形式</p>
<p>比较常用的有998244353,1004535809,469762049，这三个原根都是3</p>
<p>任意模数咋整好？</p>
<p>$n$次多项式在模$m$下乘积，最终系数一定不会大于$nm^2$所以找三个模数分别做$NTT$再使用$CRT$合并一下就好了，大概范围是$10^{26}$</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//P4245</span></span><br><span class="line">#pragma GCC optimize(2) </span><br><span class="line">#pragma GCC optimize(3) </span><br><span class="line">#pragma GCC optimize("Ofast")</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long ll;</span><br><span class="line">typedef long long LL;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">rd</span>()</span>&#123;T x=<span class="number">0</span>;ll f=<span class="number">1</span>;char c=getchar();<span class="keyword">while</span>(c&gt;<span class="string">'9'</span>||c&lt;<span class="string">'0'</span>) f=c==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>,c=getchar();<span class="keyword">while</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>)x=x*<span class="number">10</span>+c<span class="number">-48</span>,c=getchar();<span class="keyword">return</span> x*f;&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">write</span>(<span class="title">T</span> <span class="title">x</span>)</span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)&#123;putchar(<span class="string">'-'</span>),write(-x);<span class="keyword">return</span>;&#125;<span class="keyword">if</span>(x&gt;=<span class="number">10</span>)write(x/<span class="number">10</span>);putchar(x%<span class="number">10</span>+<span class="number">48</span>);&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">write_</span>(<span class="title">T</span> <span class="title">x</span>)</span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)&#123;putchar(<span class="string">'-'</span>),write(-x);putchar(<span class="string">' '</span>);<span class="keyword">return</span>;&#125;<span class="keyword">if</span>(x&gt;=<span class="number">10</span>)write(x/<span class="number">10</span>);putchar(x%<span class="number">10</span>+<span class="number">48</span>);putchar(<span class="string">' '</span>);&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">writeln</span>(<span class="title">T</span> <span class="title">x</span>)</span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)&#123;putchar(<span class="string">'-'</span>),write(-x);putchar(<span class="string">'\n'</span>);<span class="keyword">return</span>;&#125;<span class="keyword">if</span>(x&gt;=<span class="number">10</span>)write(x/<span class="number">10</span>);putchar(x%<span class="number">10</span>+<span class="number">48</span>);putchar(<span class="string">'\n'</span>);&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">min</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> <span class="title">c</span>)</span>&#123;<span class="keyword">return</span> min(min(a, b), c);&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">max</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> <span class="title">c</span>)</span>&#123;<span class="keyword">return</span> max(max(a, b), c);&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">min</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> <span class="title">c</span>, <span class="title">T</span> <span class="title">d</span>)</span>&#123;<span class="keyword">return</span> min(min(a, b), min(c, d));&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">max</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> <span class="title">c</span>, <span class="title">T</span> <span class="title">d</span>)</span>&#123;<span class="keyword">return</span> max(max(a, b), max(c, d));&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">U</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">amin</span>(<span class="title">T</span> &amp;<span class="title">x</span>, <span class="title">U</span> <span class="title">y</span>) </span>&#123; <span class="keyword">if</span>(x &gt; y) x = y; &#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">U</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">amax</span>(<span class="title">T</span> &amp;<span class="title">x</span>, <span class="title">U</span> <span class="title">y</span>) </span>&#123; <span class="keyword">if</span>(x &lt; y) x = y; &#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">fpow</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> <span class="title">c</span>)</span>&#123;T ans = <span class="number">1</span>;<span class="keyword">while</span>(b)&#123;<span class="keyword">if</span>(b &amp; <span class="number">1</span>)ans = <span class="number">1</span>ll * ans * a % c; a = <span class="number">1</span>ll * a * a % c;b &gt;&gt;= <span class="number">1</span>;&#125;<span class="keyword">return</span> ans;&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">fpow</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>)</span>&#123;T ans = <span class="number">1</span>;<span class="keyword">while</span>(b)&#123;<span class="keyword">if</span>(b &amp; <span class="number">1</span>)ans = <span class="number">1</span>ll * ans * a;a = <span class="number">1</span>ll * a * a;b &gt;&gt;= <span class="number">1</span>;&#125; <span class="keyword">return</span> ans;&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">mul</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> <span class="title">p</span>) </span>&#123;LL re = <span class="number">0</span>;<span class="keyword">for</span> (; b; b &gt;&gt;= <span class="number">1</span>, a = (a + a) % p)<span class="keyword">if</span> (b &amp; <span class="number">1</span>) re = (re + a) % p;<span class="keyword">return</span> re;&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">inv</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) </span>&#123;<span class="keyword">return</span> fpow(a, b - <span class="number">2</span>, b);&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">gcd</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) </span>&#123;<span class="keyword">if</span>(!b) <span class="keyword">return</span> a;<span class="keyword">return</span> gcd(b, a % b);&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">lcm</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) </span>&#123;<span class="keyword">return</span> a / gcd(a, b) * b;&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">Exgcd</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> &amp;<span class="title">x</span>, <span class="title">T</span> &amp;<span class="title">y</span>) </span>&#123;<span class="keyword">if</span>(b == <span class="number">0</span>)&#123;x = <span class="number">1</span>;y = <span class="number">0</span>;<span class="keyword">return</span>;&#125;Exgcd(b, a % b, x, y);T tp = x;x = y;y = tp - a / b * y;&#125;</span><br><span class="line">#define rdi rd&lt;int&gt;</span><br><span class="line">#define rdl rd&lt;LL&gt;</span><br><span class="line">#define N 400005</span><br><span class="line">int len, len1, len2, mod, lim = <span class="number">1</span>, L = <span class="number">0</span>;</span><br><span class="line">int rev[N], F[N], G[N], A[N][<span class="number">3</span>], B[N][<span class="number">3</span>], ans[N];</span><br><span class="line">int pr[<span class="number">3</span>] = &#123;<span class="number">469762049</span>, <span class="number">998244353</span>, <span class="number">1004535809</span>&#125;;</span><br><span class="line">int inv(int a, int b) &#123;<span class="keyword">return</span> fpow(a, b - <span class="number">2</span>, b);&#125;</span><br><span class="line"><span class="keyword">void</span> NTTA(int u, int lim, int type) &#123;</span><br><span class="line">    int p = pr[u];</span><br><span class="line">    int inv3 = fpow(<span class="number">3</span>, p - <span class="number">2</span>, p);</span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">0</span> ; i &lt; lim ; i++ )</span><br><span class="line">        <span class="keyword">if</span> (i &lt; rev[i]) swap(A[i][u], A[rev[i]][u]);</span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">1</span> ; i &lt; lim ; i &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        int wn = fpow(type == <span class="number">1</span> ? <span class="number">3</span> : inv3, (p - <span class="number">1</span>) / (i &lt;&lt; <span class="number">1</span>), p);</span><br><span class="line">        <span class="keyword">for</span> (int j = <span class="number">0</span> ; j &lt; lim ; j += i &lt;&lt; <span class="number">1</span>) &#123;</span><br><span class="line">            LL w = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (int k = <span class="number">0</span> ; k &lt; i ; k ++, w = (w * wn) % p) &#123;</span><br><span class="line">                int x = A[j + k][u], y = <span class="number">1</span>ll * w * A[j + k + i][u] % p;</span><br><span class="line">                A[j + k][u] = (<span class="number">1</span>ll * x + y + p) % p;</span><br><span class="line">                A[j + k + i][u] = (<span class="number">1</span>ll * x - y + p) % p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (type == <span class="number">-1</span>) &#123;</span><br><span class="line">        int inv = fpow(lim, p - <span class="number">2</span>, p);</span><br><span class="line">        <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; lim ; i ++) A[i][u] = <span class="number">1</span>ll * A[i][u] * inv % p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> NTTB(int u, int lim, int type) &#123;</span><br><span class="line">    int p = pr[u];</span><br><span class="line">    int inv3 = fpow(<span class="number">3</span>, p - <span class="number">2</span>, p);</span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">0</span> ; i &lt; lim ; i++ )</span><br><span class="line">        <span class="keyword">if</span> (i &lt; rev[i]) swap(B[i][u], B[rev[i]][u]);</span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">1</span> ; i &lt; lim ; i &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        int wn = fpow(type == <span class="number">1</span> ? <span class="number">3</span> : inv3, (p - <span class="number">1</span>) / (i &lt;&lt; <span class="number">1</span>), p);</span><br><span class="line">        <span class="keyword">for</span> (int j = <span class="number">0</span> ; j &lt; lim ; j += i &lt;&lt; <span class="number">1</span>) &#123;</span><br><span class="line">            LL w = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (int k = <span class="number">0</span> ; k &lt; i ; k ++, w = (w * wn) % p) &#123;</span><br><span class="line">                int x = B[j + k][u], y = <span class="number">1</span>ll * w * B[j + k + i][u] % p;</span><br><span class="line">                B[j + k][u] = (<span class="number">1</span>ll * x + y + p) % p;</span><br><span class="line">                B[j + k + i][u] = (<span class="number">1</span>ll * x - y + p) % p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (type == <span class="number">-1</span>) &#123;</span><br><span class="line">        int inv = fpow(lim, p - <span class="number">2</span>, p);</span><br><span class="line">        <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; lim ; i ++) B[i][u] = <span class="number">1</span>ll * B[i][u] * inv % p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> CRT()&#123;</span><br><span class="line">    len = len1 + len2;</span><br><span class="line">    LL a, b, c, t, k, M = <span class="number">1</span>ll * pr[<span class="number">0</span>] * pr[<span class="number">1</span>];</span><br><span class="line">    LL inv1 = inv(pr[<span class="number">1</span>], pr[<span class="number">0</span>]), inv0 = inv(pr[<span class="number">0</span>], pr[<span class="number">1</span>]),inv3 = inv(M % pr[<span class="number">2</span>], pr[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt;= len ; i++ ) &#123;</span><br><span class="line">        a = A[i][<span class="number">0</span>], b = A[i][<span class="number">1</span>], c = A[i][<span class="number">2</span>];</span><br><span class="line">        t = (mul(a * pr[<span class="number">1</span>] % M, inv1, M) + mul(b * pr[<span class="number">0</span>] % M, inv0, M)) % M;</span><br><span class="line">        k = ((c - t % pr[<span class="number">2</span>]) % pr[<span class="number">2</span>] + pr[<span class="number">2</span>]) % pr[<span class="number">2</span>] * inv3 % pr[<span class="number">2</span>];</span><br><span class="line">        ans[i] = ((k % mod) * (M % mod) % mod + t % mod) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">    len1 = rdi(), len2 = rdi(), mod = rdi();</span><br><span class="line">    <span class="keyword">while</span> (lim &lt;= (len1 + len2)) lim &lt;&lt;= <span class="number">1</span>, L ++;</span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">0</span> ; i &lt; lim ; i++ )rev[i] = (rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (L - <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">0</span> ; i &lt;= len1 ; i++ ) F[i] = rdi(), A[i][<span class="number">2</span>] = A[i][<span class="number">1</span>] = A[i][<span class="number">0</span>] = F[i];</span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">0</span> ; i &lt;= len2 ; i++ ) G[i] = rdi(), B[i][<span class="number">2</span>] = B[i][<span class="number">1</span>] = B[i][<span class="number">0</span>] = G[i];</span><br><span class="line">    <span class="keyword">for</span> (int u = <span class="number">0</span> ; u &lt;= <span class="number">2</span> ; u++ ) &#123; </span><br><span class="line">        NTTA(u, lim, <span class="number">1</span>), NTTB(u, lim, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (int i = <span class="number">0</span> ; i &lt; lim ; i++ ) A[i][u] = <span class="number">1</span>ll * A[i][u] * B[i][u] % pr[u];</span><br><span class="line">        NTTA(u, lim, <span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    CRT();</span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">0</span> ; i &lt;= len ; i++ ) write_(ans[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>不定积分小总结</title>
    <url>/p/4a67a9bc.html</url>
    <content><![CDATA[<blockquote>
<p>  <del>要养成用求导运算来检验不定积分计算结果是否正确的习惯</del></p>
</blockquote>
<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="Ostrogradsky方法（奥斯特罗格拉茨基）"><a href="#Ostrogradsky方法（奥斯特罗格拉茨基）" class="headerlink" title="Ostrogradsky方法（奥斯特罗格拉茨基）"></a>Ostrogradsky方法（奥斯特罗格拉茨基）</h2><h2 id="递推公式法"><a href="#递推公式法" class="headerlink" title="递推公式法"></a>递推公式法</h2><h2 id="欧拉代换法"><a href="#欧拉代换法" class="headerlink" title="欧拉代换法"></a>欧拉代换法</h2><h2 id="二项微分式的积分"><a href="#二项微分式的积分" class="headerlink" title="二项微分式的积分"></a>二项微分式的积分</h2><script type="math/tex; mode=display">
\int{x^m(a+bx^n)^pdx} \quad (m,n和p为有理数)</script><p>仅在下列三种情形下可化为有理函数的积分（切比雪夫定理）：</p>
<p>$\alpha$）$p$为整数，此时令$x=z^N$，其中$N$为分数m和n的公分母</p>
<p>$\beta$）$\dfrac{m+1}{n}$为整数，此时令$a+bx^n=z^N$，其中$N$为分数$p$的分母</p>
<p>$\gamma$) $\dfrac{m+1}{n}+p$为整数，此时利用代换$ax^{-n}+b=z^{N}$，其中$N$为分数$p$的分母</p>
<p>若$n=1$，则这些情形等价于：（1）p为整数（2）m为整数（3）m+p为整数</p>
<h2 id="形如"><a href="#形如" class="headerlink" title="形如"></a>形如</h2><script type="math/tex; mode=display">
\int{sin^mxcos^nxdx} \quad (m,n为整数)</script><p>的积分可利用巧妙的变换或运用递推公式计算</p>
<h2 id="若-a-c-2-b-2-neq-0-，则"><a href="#若-a-c-2-b-2-neq-0-，则" class="headerlink" title="若$(a-c)^2+b^2 \neq 0$，则"></a>若$(a-c)^2+b^2 \neq 0$，则</h2><script type="math/tex; mode=display">
\int{\frac{a_1sinx+b_1cosx}{asin^2x+2bsinxcosx+ccos^2x}dx=A\int{\frac{du_1}{k_1u_1^2+\lambda_1}}}+B\int{\frac{du_2}{k_2u_2^2+\lambda_2}}</script><p>式中A、B为待定系数，$\lambda_1，\lambda_2$为方程</p>
<script type="math/tex; mode=display">
\left|
\begin{array}{c}
a - \lambda & b \\
b & c-\lambda
\end{array}
\right |</script><p>的根，而</p>
<script type="math/tex; mode=display">
u_i=(a-\lambda_i)sinx+bcosx，\quad k_i=\frac{1}{a-\lambda_i} (i=1,2).</script><h2 id="Euler替换"><a href="#Euler替换" class="headerlink" title="Euler替换"></a>Euler替换</h2><p>详情见【数学分析习题演练第一册.周民强】 p340-p343</p>
<h2 id="有理函数的不定积分问题"><a href="#有理函数的不定积分问题" class="headerlink" title="有理函数的不定积分问题"></a>有理函数的不定积分问题</h2><p>只需考察有理真分式：</p>
<script type="math/tex; mode=display">
f(x)=\frac{a_0x^n+a_1x^{n-1}+\dots+a_{n-1}x+a_n}{b_0x^{m}+b_1x^{m-1}+\dots+b_{m-1}x+b_m}</script><p>不难证明，它总可分解为形如下列四种最简真分式的组合：</p>
<p>$\displaystyle \frac{A}{x-a}, \frac{A}{(x-a)^k}(k \geq 2), \frac{Ax+B}{x^2+px+q}, \frac{Ax+B}{(x^2+px+q)^k}(p^2-4q&lt;0; k \geq 2)$</p>
<p>因此，有理分式的不定积分就化归为计算上述四种类型真分式的不定积分：</p>
<p>(i) $\displaystyle \int{\frac{A}{x-a}dx}=Aln|x-a|+C$</p>
<p>(ii) $\displaystyle \int{\frac{A}{(x-a)^k}dx}=A\int{(x-a)^{-k}dx}=A\frac{(x-a)^ {1-k}}{1-k}+C$</p>
<p>(iii)</p>
<script type="math/tex; mode=display">
\begin{align}
\int{\frac{Ax+B}{(x^2+px+q)}dx} 
&= \int{\frac{\frac{A}{2}(2x+p)+(B-\frac{Ap}{2})}{x^2+px+q}dx} \\
&= \frac{A}{2}\int{\frac{2x+p}{x^2+px+q}dx}+(B-\frac{Ap}{2})\int{\frac{dx}{x^2+px+q}} \\
&= \frac{A}{2}ln|x^2+px+q|+(B-\frac{Ap}{2})\int{\frac{dx}{(x+\frac{p}{2})^2+(q-\frac{p^2}{4})}} \\
&= \frac{A}{2}ln|x^2+px+q|+\frac{2B-Ap}{\sqrt{4q-p^2}}arctan{\frac{2x+p}{\sqrt{4q-p^2}}}+C
\end{align}</script><p>(iv) </p>
<script type="math/tex; mode=display">
\begin{align}
\int{\frac{Ax+B}{(x^2+px+q)^k}dx} 
&= \int{\frac{\frac{A}{2}(2x+p)+(B-\frac{Ap}{2})}{(x^2+px+q)^k}dx} \\
&= \frac{A}{2}\int{\frac{2x+p}{(x^2+px+q)^k}+(B-\frac{Ap}{2})\int{\frac{dx}{(x^2+px+q)^k}}} \\
&= \frac{A}{2}I_k+(B-\frac{Ap}{2})J_k
\end{align}</script><p>对于$I_k$，用替换$x^2+px+q=t,dt=(2x+p)dx$，则可得</p>
<script type="math/tex; mode=display">
I_k=\int{\frac{dt}{t^k}=\frac{t^{1-k}}{1-k}}+C=\frac{1}{(1-k)(x^2+px+q)^{k-1}}+C</script><p>注意到$\displaystyle q-\frac{p^2}{4}&gt;0$，故可对$J_k$用替换$\displaystyle x+\frac{p}{2}=t,dx=dt,q-\frac{p^2}{4}=t^2$，则可得</p>
<script type="math/tex; mode=display">
\begin{align}
J_k 
&= \int{\frac{dx}{[(x+\frac{p}{2})^2+(q-\frac{p^2}4)]^k}} \\
&= \int{\frac{dt}{(t^2+l^2)^k}} \\
&= \frac{1}{l^2}\int{\frac{(t^2+l^2)-t^2}{(t^2+l^2)^k}dt} \\
&= \frac{1}{l^2}\int{\frac{dt}{(t^2+l^2)^{k-1}}}-\frac{1}{l^2}\int{\frac{t^2}{(t^2+l^2)^k}dt}
\end{align}</script><p>上式最后一项不定积分又可分解为</p>
<script type="math/tex; mode=display">
\begin{align}
\int{\frac{t^2}{(t^2+l^2)^k}dt} &= \frac{1}{2}\int{t\frac{d(t^2+l^2)}{(t^2+l^2)^k}} \\
&=-\frac{1}{2(k-1)}\int{td(\frac{1}{(t^2+l^2)^{k-1}})} \\
&=-\frac{1}{2(k-1)}[t\frac{1}{(t^2+l^2)^{k-1}}-\int{\frac{dt}{(t^2+l^2)^{k-1}}}] 
\end{align}</script><p>那么有</p>
<script type="math/tex; mode=display">
\begin{align}
J_k &= \int{\frac{dt}{(t^2+l^2)^k}} \\
&=\frac{1}{l^2}\int{\frac{dt}{(t^2+l^2)^{k-1}}}+\frac{1}{l^2}\frac{1}{2(k-1)}[\frac{t}{(t^2+l^2)^{k-1}}-\int{\frac{dt}{(t^2+l^2)^{k-1}}}] \\
&= \frac{t}{2l^2(k-1)(t^2+l^2)^{k-1}}+\frac{2k-3}{2l^2(k-1)}\int{\frac{dt}{(t^2+l^2)^{k-1}}}
\end{align}</script><p>上式右端之不定积分于$J_k$型类似，只不过这里的方幂已经下降为$k-1$，可记为$J_{k-1}$。这就是说，不定积分$J_k$可用$J_{k-1}$表示出。因此，继续上述计算过程，最终将化归为下述不定积分：</p>
<script type="math/tex; mode=display">
\int{\frac{dt}{t^2+l^2}=\frac{1}{l}arctan{\frac{t}{l}}+C}</script><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><p>(1)</p>
<p>$ \displaystyle I = \frac{1}{2}\int{x^2\sqrt{x^{2}+1}} $</p>
<p>因为</p>
<script type="math/tex; mode=display">
\displaystyle (x^3\sqrt{x^2+1})'=3x^2\sqrt{x^2+1}+\frac{x^4}{\sqrt{x^2+1}}=4x^2\sqrt{x^2+1}-\sqrt{x^2+1}+\frac{1}{\sqrt{x^2+1}}</script><p> ​<br>所以 </p>
<script type="math/tex; mode=display">
\displaystyle\ x^2\sqrt{x^2+1} =\frac{1}{4}[(x^3\sqrt{x^2+1})'+\sqrt{x^2+1}-\frac{1}{\sqrt{x^2+1}}]</script><p> ​<br>于是</p>
<script type="math/tex; mode=display">
\displaystyle I=\frac{1}{4}[x^3\sqrt{x^2+1}+\frac{x}{2}\sqrt{x^2+1}-\frac{1}{2}ln(x+\sqrt{x^2+1})]+C</script><p>(2)</p>
<p> 结合(1)可设计不定积分$\displaystyle\int{x^k\sqrt{x^2+1}dx}$和$\displaystyle\int{\frac{x^k}{\sqrt{x^2+1}}}$的一般解法</p>
<script type="math/tex; mode=display">
\begin{align}
\int{x^k\sqrt{x^2+1}dx} &=\frac{1}{k+1}\int{\sqrt{x^2+1}dx^{k+1}} \\
&= \frac{x^{k+1}\sqrt{x^2+1}}{k+1} -\frac{1}{k+1}\int{x^{k+1}d{\sqrt{x^2+1}}} \\
&= \frac{x^{k+1}\sqrt{x^2+1}}{k+1} - \frac{1}{k+1}\int{\frac{x^{k+2}}{\sqrt{x^2+1}}} \\
\therefore \frac{1}{k+1}\int{\frac{x^{k+2}}{\sqrt{x^2+1}}} &= \frac{x^{k+1}\sqrt{x^2+1}}{k+1} - \int{x^k\sqrt{x^2+1}dx} \\
\int{\frac{x^{k+2}}{\sqrt{x^2+1}}} &= x^{k+1}\sqrt{x^2+1}-(k+1)\int{x^k\sqrt{x^2+1}dx} \\
\end{align}</script><p>(3)</p>
<script type="math/tex; mode=display">
I_{m+1} = \frac{u}{2a^2m(u^2+a^2)m} + \frac{2m-1}{2a^2m}I_m, \quad I_m = \int{\frac{du}{(u^2+a^2)^m}} \\

\begin{aligned}
Prove:\int{\frac{du}{(u^2+a^2)^m}} &= \frac{u}{(u^2+a^2)^m}-\int{ud\frac{1}{(u^2+a^2)^m}} \\
&=\frac{u}{(u^2+a^2)^m} + m\int{\frac{2u^2}{(u^2+a^2)^{m+1}}du} \\
&=\frac{u}{(u^2+a^2)^m} + 2m(\int{\frac{1}{(u^2+a^2)^m}du - \int{\frac{a^2}{(u^2+a^2)^{m+1}}du}}) \\
2ma^2\int{\frac{du}{(u^2+a^2)^{m+1}}} &= \frac{u}{(u^2+a^2)^m} + (2m-1)\int{\frac{1}{(u^2+a^2)^m}du} \\
\int{\frac{du}{(u^2+a^2)^{m+1}}} &= \frac{u}{2a^2m(u^2+a^2)m} + \frac{2m-1}{2a^2m}\int{\frac{du}{(u^2+a^2)^m}}
\end{aligned}</script><p>(4) $I=\displaystyle\int{\frac{sinxdx}{asinx+bcosx}}, J=\int\frac{cosxdx}{asinx+bcosx}$</p>
<script type="math/tex; mode=display">
\begin{cases}
aI+bJ=\displaystyle\int{dx} \\
aJ-bI=\displaystyle\int{\frac{acosx-bsinxdx}{asinx+bcosx}}=\displaystyle\int{\frac{(asinx+bcosx)'dx}{asinx+bcosx}} =ln|asinx+bcosx|+C\\
\end{cases}</script><p>(5) 设对正整数$\displaystyle m,n$，定义$\displaystyle I(m,n)=\int{cos^mxsin^nxdx}$ （练习）【数学分析习题课讲义p287，p289】</p>
<script type="math/tex; mode=display">
\displaystyle 
I(m,n)=\frac{cos^{m-1}xsin^{n+1}x}{m+n}+\frac{m-1}{m+n}I(m-2,n) \\
I(m,n)=-\frac{sin^{n-1}xcos^{m+1}x}{m+n}+\frac{n-1}{m+n}I(m,n-2) \\
I(n,n)=-\frac{cos2xsin^{n-1}2x}{n*2^{n+1}}+\frac{n-1}{4n}I(n-2,n-2)</script><p>(6) 设对正整数$n&gt;2$，定义$\displaystyle I_n=\int{\frac{sinnx}{cosx}dx}$</p>
<script type="math/tex; mode=display">
\begin{align}
I_n &= \int{\frac{sin(n-1)xcosx+sinxcos(n-1)x}{sinx}dx} \\
&= \int{\frac{sin(n-1)xcosx}{sinx}dx+\int{cos(n-1)xdx}} \\
&= \frac{1}{2}\int{\frac{sinnx+sin(n-2)x}{sinx}dx}+\int{cos(n-1)xdx} \\
&= \frac{1}{2}I_n+\frac{1}{2}I_{n-2}+\frac{1}{n-1}sin(n-1)x \\
I_n &= \frac{2}{n-1}sin(n-1)x+I_{n-2}
\end{align}</script>]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>高等数学</tag>
        <tag>Skills</tag>
      </tags>
  </entry>
  <entry>
    <title>高等数学小结(1)</title>
    <url>/p/c912e34d.html</url>
    <content><![CDATA[<h4 id="绝对值不等式"><a href="#绝对值不等式" class="headerlink" title="绝对值不等式"></a>绝对值不等式</h4><p>$\displaystyle ||x|-|y|| \leq |x \pm y| \leq |x|+|y|$</p>
<h4 id="调几算平"><a href="#调几算平" class="headerlink" title="调几算平"></a>调几算平</h4><p>调和平均数（harmonic mean）: $\displaystyle H_n=\frac{n}{\sum_\limits{i=1}^{n}\dfrac{1}{a_i}}$</p>
<p>几何平均数（Geometric Mean）: $\displaystyle G_n=\sqrt[n]{\prod_{i=1}^{n}a_i}$</p>
<p>算术平均数（ arithmetic mean）: $\displaystyle A_n=\frac{\sum\limits_{i=1}^{n}a_i}{n}$</p>
<p>平方平均数（quadratic mean）: $\displaystyle Q_n=\sqrt{\frac{\sum\limits_{i=1}^{n}a_i^2}{n}}$</p>
<p>$H_n \leq G_n \leq A_n \leq Q_n$</p>
<h4 id="伯努利不等式"><a href="#伯努利不等式" class="headerlink" title="伯努利不等式"></a>伯努利不等式</h4><p>$x \geq 0, n \in N_+$，则：$\displaystyle (1+x)^n \geq 1 + nx$</p>
<h4 id="有界无界"><a href="#有界无界" class="headerlink" title="有界无界"></a>有界无界</h4><p>有界：$\exists M&gt;0,\forall x \in D, |f(x)| \leq M$</p>
<p>无界：$\forall M&gt;0, \exists x \in D, |f(x)| &gt; M$</p>
<h4 id="单调与严格单调"><a href="#单调与严格单调" class="headerlink" title="单调与严格单调"></a>单调与严格单调</h4><h4 id="最小正周期"><a href="#最小正周期" class="headerlink" title="最小正周期"></a>最小正周期</h4><p>并非每个<strong>周期函数</strong>都有<strong>最小正周期</strong>，如<strong>狄利克雷函数</strong></p>
<h4 id="函数定义："><a href="#函数定义：" class="headerlink" title="函数定义："></a>函数定义：</h4><p>设数集$D \subset R$，则称映射$f:D \rightarrow R$为定义在$D$s上的函数，通常简记为$y=f(x), x \in D$——高等数学p3</p>
]]></content>
      <tags>
        <tag>高等数学</tag>
      </tags>
  </entry>
  <entry>
    <title>几种常见平衡树</title>
    <url>/p/cab1520f.html</url>
    <content><![CDATA[<p>题目源于P3369</p>
<h2 id="0-永远的神RedBlackTree"><a href="#0-永远的神RedBlackTree" class="headerlink" title="0.永远的神RedBlackTree"></a>0.永远的神RedBlackTree</h2><p>碾压性的速度优势和<del>代码量</del></p>
<p>可以分裂合并，但是是log方的，可以可持久化</p>
<p>引用某个OIer的话：<del>在我心中红黑树的难度和线段树是一样的</del></p>
<p><del>不就800行代码嘛我秒杀</del></p>
<h2 id="1-普通-Treap"><a href="#1-普通-Treap" class="headerlink" title="1.普通 Treap"></a>1.普通 Treap</h2><p>代码量小，速度较快</p>
<p>不能分裂合并，可以可持久化</p>
<p>挺好的</p>
<p><del>逻辑理清楚就一下子写好了，坑点较少</del><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long ll;</span><br><span class="line">typedef long long LL;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">rd</span>()</span>&#123;T x = <span class="number">0</span>;ll f = <span class="number">1</span>; char c = getchar();<span class="keyword">while</span>(c &gt; <span class="string">'9'</span> || c &lt; <span class="string">'0'</span>) f = c == <span class="string">'-'</span> ? <span class="number">-1</span> : <span class="number">1</span>, c = getchar();<span class="keyword">while</span>(c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + c - <span class="number">48</span>, c = getchar();<span class="keyword">return</span> x * f;&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">write</span>(<span class="title">T</span> <span class="title">x</span>)</span>&#123;<span class="keyword">if</span>(x &lt; <span class="number">0</span>)&#123;putchar(<span class="string">'-'</span>), write(-x);<span class="keyword">return</span>;&#125;<span class="keyword">if</span>(x &gt;= <span class="number">10</span>)write(x / <span class="number">10</span>);putchar(x % <span class="number">10</span> + <span class="number">48</span>);&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">write_</span>(<span class="title">T</span> <span class="title">x</span>)</span>&#123;<span class="keyword">if</span>(x &lt; <span class="number">0</span>)&#123;putchar(<span class="string">'-'</span>), write(-x);putchar(<span class="string">' '</span>);<span class="keyword">return</span>;&#125;<span class="keyword">if</span>(x &gt;= <span class="number">10</span>)write(x / <span class="number">10</span>);putchar(x % <span class="number">10</span> + <span class="number">48</span>);putchar(<span class="string">' '</span>);&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">writeln</span>(<span class="title">T</span> <span class="title">x</span>)</span>&#123;<span class="keyword">if</span>(x &lt; <span class="number">0</span>)&#123;putchar(<span class="string">'-'</span>), write(-x);putchar(<span class="string">'\n'</span>);<span class="keyword">return</span>;&#125;<span class="keyword">if</span>(x &gt;= <span class="number">10</span>)write(x / <span class="number">10</span>);putchar(x % <span class="number">10</span> + <span class="number">48</span>);putchar(<span class="string">'\n'</span>);&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">min</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> <span class="title">c</span>)</span>&#123;<span class="keyword">return</span> min(min(a, b), c);&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">max</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> <span class="title">c</span>)</span>&#123;<span class="keyword">return</span> max(max(a, b), c);&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">min</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> <span class="title">c</span>, <span class="title">T</span> <span class="title">d</span>)</span>&#123;<span class="keyword">return</span> min(min(a, b), min(c, d));&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">max</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> <span class="title">c</span>, <span class="title">T</span> <span class="title">d</span>)</span>&#123;<span class="keyword">return</span> max(max(a, b), max(c, d));&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">fpow</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> <span class="title">c</span>)</span>&#123;T ans = <span class="number">1</span>;<span class="keyword">while</span>(b)&#123;<span class="keyword">if</span>(b &amp; <span class="number">1</span>)ans = <span class="number">1</span>ll * ans * a % c; a = <span class="number">1</span>ll * a * a % c;b &gt;&gt;= <span class="number">1</span>;&#125;<span class="keyword">return</span> ans;&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">fpow</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>)</span>&#123;T ans = <span class="number">1</span>;<span class="keyword">while</span>(b)&#123;<span class="keyword">if</span>(b &amp; <span class="number">1</span>)ans = <span class="number">1</span>ll * ans * a;a = <span class="number">1</span>ll * a * a;b &gt;&gt;= <span class="number">1</span>;&#125; <span class="keyword">return</span> ans;&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">gcd</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) </span>&#123;<span class="keyword">if</span>(!b) <span class="keyword">return</span> a;<span class="keyword">return</span> gcd(b, a % b);&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">lcm</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) </span>&#123;<span class="keyword">return</span> a / gcd(a, b) * b;&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">Exgcd</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> &amp;<span class="title">x</span>, <span class="title">T</span> &amp;<span class="title">y</span>) </span>&#123;<span class="keyword">if</span>(b == <span class="number">0</span>)&#123;x = <span class="number">1</span>;y = <span class="number">0</span>;<span class="keyword">return</span>;&#125;Exgcd(b, a % b, x, y);T tp = x;x = y;y = tp - a / b * y;&#125;</span><br><span class="line">#define rdi rd&lt;int&gt;</span><br><span class="line">#define rdl rd&lt;LL&gt;</span><br><span class="line">#define N 100005</span><br><span class="line">#define inf 0x3f3f3f3f</span><br><span class="line">int v[N], siz[N], dat[N], num[N];</span><br><span class="line">int son[N][<span class="number">2</span>];</span><br><span class="line">int tot, root;</span><br><span class="line"><span class="keyword">void</span> pushup(int o) &#123;</span><br><span class="line">    siz[o] = siz[son[o][<span class="number">0</span>]] + siz[son[o][<span class="number">1</span>]] + num[o];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> Rotate(int &amp;p, int d) &#123;</span><br><span class="line">    int k = son[p][d ^ <span class="number">1</span>];</span><br><span class="line">    son[p][d ^ <span class="number">1</span>] = son[k][d];</span><br><span class="line">    son[k][d] = p;</span><br><span class="line">    pushup(p);</span><br><span class="line">    pushup(k);</span><br><span class="line">    p = k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> ins(int &amp;p, int x) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!p) &#123;</span><br><span class="line">        p = ++tot;</span><br><span class="line">        v[p] = x;</span><br><span class="line">        siz[p] = num[p] = <span class="number">1</span>;</span><br><span class="line">        dat[p] = rand();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (v[p] == x) &#123;</span><br><span class="line">        num[p]++;</span><br><span class="line">        siz[p]++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    int d = (x &gt; v[p]);</span><br><span class="line">    ins(son[p][d], x);</span><br><span class="line">    <span class="keyword">if</span> (dat[p] &lt; dat[son[p][d]]) Rotate(p, d ^ <span class="number">1</span>);</span><br><span class="line">    pushup(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> del(int &amp;p, int x) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!p) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; v[p]) del(son[p][<span class="number">0</span>], x);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; v[p]) del(son[p][<span class="number">1</span>], x);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!son[p][<span class="number">0</span>] &amp;&amp; !son[p][<span class="number">1</span>]) &#123;</span><br><span class="line">            num[p] --;</span><br><span class="line">            siz[p] --;</span><br><span class="line">            <span class="keyword">if</span> (num[p] == <span class="number">0</span>) p = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!son[p][<span class="number">0</span>] &amp;&amp; son[p][<span class="number">1</span>]) &#123;</span><br><span class="line">            Rotate(p, <span class="number">0</span>);</span><br><span class="line">            del(son[p][<span class="number">0</span>], x);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (son[p][<span class="number">0</span>] &amp;&amp; !son[p][<span class="number">1</span>]) &#123;</span><br><span class="line">            Rotate(p, <span class="number">1</span>);</span><br><span class="line">            del(son[p][<span class="number">1</span>], x);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            int d = (dat[son[p][<span class="number">0</span>]] &gt; dat[son[p][<span class="number">1</span>]]);</span><br><span class="line">            Rotate(p, d);</span><br><span class="line">            del(son[p][d], x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    pushup(p);</span><br><span class="line">&#125;</span><br><span class="line">int rnk(int p, int x) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!p) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (v[p] == x) <span class="keyword">return</span> siz[son[p][<span class="number">0</span>]] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (v[p] &lt; x) <span class="keyword">return</span> siz[son[p][<span class="number">0</span>]] + num[p] + rnk(son[p][<span class="number">1</span>], x);</span><br><span class="line">    <span class="keyword">if</span> (v[p] &gt; x) <span class="keyword">return</span> rnk(son[p][<span class="number">0</span>], x);</span><br><span class="line">&#125;</span><br><span class="line">int find(int p, int x) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!p) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (siz[son[p][<span class="number">0</span>]] &gt;= x) find(son[p][<span class="number">0</span>], x);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (siz[son[p][<span class="number">0</span>]] + num[p] &lt; x) <span class="keyword">return</span> find(son[p][<span class="number">1</span>], x - siz[son[p][<span class="number">0</span>]] - num[p]);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> v[p];</span><br><span class="line">&#125;</span><br><span class="line">int pre(int p, int x) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!p) <span class="keyword">return</span> -inf;</span><br><span class="line">    <span class="keyword">if</span> (v[p] &gt;= x) <span class="keyword">return</span> pre(son[p][<span class="number">0</span>], x);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> max(v[p], pre(son[p][<span class="number">1</span>], x));</span><br><span class="line">&#125;</span><br><span class="line">int suc(int p, int x) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!p) <span class="keyword">return</span> inf;</span><br><span class="line">    <span class="keyword">if</span> (v[p] &lt;= x) <span class="keyword">return</span> suc(son[p][<span class="number">1</span>], x);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> min(v[p], suc(son[p][<span class="number">0</span>], x));</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">    int n = rdi();</span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">1</span> ; i &lt;= n ; i++ ) &#123;</span><br><span class="line">        int op = rdi(), x = rdi();</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>) ins(root, x);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>) del(root, x);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">3</span>) writeln(rnk(root, x));</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">4</span>) writeln(find(root, x));</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">5</span>) writeln(pre(root, x));</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">6</span>) writeln(suc(root, x));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="2-FHQ-Treap"><a href="#2-FHQ-Treap" class="headerlink" title="2.FHQ Treap"></a>2.FHQ Treap</h2><p>代码量小，速度非常慢（这个其实看写法，我写的都很慢）</p>
<p>可以分裂合并可持久化，功能挺多的</p>
<p><del>但是速度实在慢</del></p>
<p>核心在于Split和Mergy两个操作，注意函数里的&amp;<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;iomanip&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;ctime&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long ll;</span><br><span class="line">typedef long long LL;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">rd</span>()</span>&#123;T x = <span class="number">0</span>;ll f = <span class="number">1</span>; char c = getchar();<span class="keyword">while</span>(c &gt; <span class="string">'9'</span> || c &lt; <span class="string">'0'</span>) f = c == <span class="string">'-'</span> ? <span class="number">-1</span> : <span class="number">1</span>, c = getchar();<span class="keyword">while</span>(c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + c - <span class="number">48</span>, c = getchar();<span class="keyword">return</span> x * f;&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">write</span>(<span class="title">T</span> <span class="title">x</span>)</span>&#123;<span class="keyword">if</span>(x &lt; <span class="number">0</span>)&#123;putchar(<span class="string">'-'</span>), write(-x);<span class="keyword">return</span>;&#125;<span class="keyword">if</span>(x &gt;= <span class="number">10</span>)write(x / <span class="number">10</span>);putchar(x % <span class="number">10</span> + <span class="number">48</span>);&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">write_</span>(<span class="title">T</span> <span class="title">x</span>)</span>&#123;<span class="keyword">if</span>(x &lt; <span class="number">0</span>)&#123;putchar(<span class="string">'-'</span>), write(-x);putchar(<span class="string">' '</span>);<span class="keyword">return</span>;&#125;<span class="keyword">if</span>(x &gt;= <span class="number">10</span>)write(x / <span class="number">10</span>);putchar(x % <span class="number">10</span> + <span class="number">48</span>);putchar(<span class="string">' '</span>);&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">writeln</span>(<span class="title">T</span> <span class="title">x</span>)</span>&#123;<span class="keyword">if</span>(x &lt; <span class="number">0</span>)&#123;putchar(<span class="string">'-'</span>), write(-x);putchar(<span class="string">'\n'</span>);<span class="keyword">return</span>;&#125;<span class="keyword">if</span>(x &gt;= <span class="number">10</span>)write(x / <span class="number">10</span>);putchar(x % <span class="number">10</span> + <span class="number">48</span>);putchar(<span class="string">'\n'</span>);&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">min</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> <span class="title">c</span>)</span>&#123;<span class="keyword">return</span> min(min(a, b), c);&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">max</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> <span class="title">c</span>)</span>&#123;<span class="keyword">return</span> max(max(a, b), c);&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">min</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> <span class="title">c</span>, <span class="title">T</span> <span class="title">d</span>)</span>&#123;<span class="keyword">return</span> min(min(a, b), min(c, d));&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">max</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> <span class="title">c</span>, <span class="title">T</span> <span class="title">d</span>)</span>&#123;<span class="keyword">return</span> max(max(a, b), max(c, d));&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">U</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">amin</span>(<span class="title">T</span> &amp;<span class="title">x</span>, <span class="title">U</span> <span class="title">y</span>) </span>&#123; <span class="keyword">if</span>(x &gt; y) x = y; &#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">U</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">amax</span>(<span class="title">T</span> &amp;<span class="title">x</span>, <span class="title">U</span> <span class="title">y</span>) </span>&#123; <span class="keyword">if</span>(x &lt; y) x = y; &#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">fpow</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> <span class="title">c</span>)</span>&#123;T ans = <span class="number">1</span>;<span class="keyword">while</span>(b)&#123;<span class="keyword">if</span>(b &amp; <span class="number">1</span>)ans = <span class="number">1</span>ll * ans * a % c; a = <span class="number">1</span>ll * a * a % c;b &gt;&gt;= <span class="number">1</span>;&#125;<span class="keyword">return</span> ans;&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">fpow</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>)</span>&#123;T ans = <span class="number">1</span>;<span class="keyword">while</span>(b)&#123;<span class="keyword">if</span>(b &amp; <span class="number">1</span>)ans = <span class="number">1</span>ll * ans * a;a = <span class="number">1</span>ll * a * a;b &gt;&gt;= <span class="number">1</span>;&#125; <span class="keyword">return</span> ans;&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">gcd</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) </span>&#123;<span class="keyword">if</span>(!b) <span class="keyword">return</span> a;<span class="keyword">return</span> gcd(b, a % b);&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">lcm</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) </span>&#123;<span class="keyword">return</span> a / gcd(a, b) * b;&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">Exgcd</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> &amp;<span class="title">x</span>, <span class="title">T</span> &amp;<span class="title">y</span>) </span>&#123;<span class="keyword">if</span>(b == <span class="number">0</span>)&#123;x = <span class="number">1</span>;y = <span class="number">0</span>;<span class="keyword">return</span>;&#125;Exgcd(b, a % b, x, y);T tp = x;x = y;y = tp - a / b * y;&#125;</span><br><span class="line">#define rdi rd&lt;int&gt;</span><br><span class="line">#define rdl rd&lt;LL&gt;</span><br><span class="line">#define N 100005</span><br><span class="line">int v[N], rnd[N], siz[N], son[N][<span class="number">2</span>];</span><br><span class="line">int tot;</span><br><span class="line">int root, x, y, z;</span><br><span class="line">int New(int w) &#123;</span><br><span class="line">    v[++tot] = w;</span><br><span class="line">    siz[tot] = <span class="number">1</span>;</span><br><span class="line">    rnd[tot] = rand();</span><br><span class="line">    <span class="keyword">return</span> tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> update(int p) &#123;</span><br><span class="line">    siz[p] = siz[son[p][<span class="number">0</span>]] + siz[son[p][<span class="number">1</span>]] + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> Split(int p, int k, int &amp;x, int &amp;y) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!p) &#123;</span><br><span class="line">        x = y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (v[p] &lt;= k) &#123; <span class="comment">//权值版</span></span><br><span class="line">        x = p;</span><br><span class="line">        Split(son[p][<span class="number">1</span>], k, son[p][<span class="number">1</span>], y);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        y = p;</span><br><span class="line">        Split(son[p][<span class="number">0</span>], k, x, son[p][<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    if (k &lt;= siz[son[p][0]]) &#123; //Siz版</span></span><br><span class="line"><span class="comment">        y = p;</span></span><br><span class="line"><span class="comment">        Split(son[p][0], k, x, son[p][0]);</span></span><br><span class="line"><span class="comment">    &#125; else &#123;</span></span><br><span class="line"><span class="comment">        x = p;</span></span><br><span class="line"><span class="comment">        Split(son[p][1], k - siz[son[p][0]] - 1, son[p][1], y);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    update(p);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">int Mergy(int x, int y) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!x || !y) <span class="keyword">return</span> x | y;</span><br><span class="line">    <span class="keyword">if</span> (rnd[x] &lt; rnd[y]) &#123;</span><br><span class="line">        son[x][<span class="number">1</span>] = Mergy(son[x][<span class="number">1</span>], y);</span><br><span class="line">        update(x);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        son[y][<span class="number">0</span>] = Mergy(x, son[y][<span class="number">0</span>]);</span><br><span class="line">        update(y);</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int kth(int p, int k) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!p) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (k &lt;= siz[son[p][<span class="number">0</span>]]) <span class="keyword">return</span> kth(son[p][<span class="number">0</span>], k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (k == siz[son[p][<span class="number">0</span>]] + <span class="number">1</span>) <span class="keyword">return</span> v[p];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> kth(son[p][<span class="number">1</span>], k - siz[son[p][<span class="number">0</span>]] - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">    int n = rdi();</span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">1</span> ; i &lt;= n ; i++ ) &#123;</span><br><span class="line">        int op = rdi(), t = rdi();</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">            Split(root, t, x, y);</span><br><span class="line">            root = Mergy(Mergy(x, New(t)), y);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>) &#123;</span><br><span class="line">            Split(root, t, x, z);</span><br><span class="line">            Split(x, t - <span class="number">1</span>, x, y);</span><br><span class="line">            y = Mergy(son[y][<span class="number">0</span>], son[y][<span class="number">1</span>]);</span><br><span class="line">            root = Mergy(Mergy(x, y), z);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">3</span>) &#123;</span><br><span class="line">            Split(root, t - <span class="number">1</span>, x, y);</span><br><span class="line">            writeln(siz[x] + <span class="number">1</span>);</span><br><span class="line">            root = Mergy(x, y);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">4</span>) &#123;</span><br><span class="line">            writeln(kth(root, t));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">5</span>) &#123;</span><br><span class="line">            Split(root, t - <span class="number">1</span>, x, y);</span><br><span class="line">            writeln(kth(x, siz[x]));</span><br><span class="line">            root = Mergy(x, y);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">6</span>) &#123;</span><br><span class="line">            Split(root, t, x, y);</span><br><span class="line">            writeln(kth(y, <span class="number">1</span>));</span><br><span class="line">            root = Mergy(x, y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="3-替罪羊树-Scapegoat-Tree"><a href="#3-替罪羊树-Scapegoat-Tree" class="headerlink" title="3.替罪羊树(Scapegoat Tree)"></a>3.替罪羊树(Scapegoat Tree)</h2><p>代码量小，随机数据下非常快，然而还是不如RBT(RBT永远滴神)</p>
<p>不能分裂合并，可以部分可持久化</p>
<p>但是在卡链的数据或者构造数据下表现就一般了</p>
<p><del>但是ACM赛制下被卡换种写法就好了吧？</del></p>
<p>—————————————————————————————<br>大部分依赖旋转（单旋或双旋）来维持平衡，但是有一些平衡树是不依赖于旋转操作。替罪羊树便是其中一种。</p>
<p>替罪羊树基于一种暴力重构的操作来保证平衡，具体来说，就是定义一个平衡因子$alpha$，当某个节点$p$的某棵子树的<br>$siz[p] * alpha &lt;= max(siz[son[p][0]], siz[son[p][1]]))$<br>便将这棵以$p$为根的子树拍扁重构</p>
<p><del>下面代码写的是vad(valid)代替了sig</del></p>
<p><del>显然，alpha的取值范围在0.5-1的范围内，一般取0.7或0.8较为合适。太大的$alpha$会使得树变深，太小则会引起过多的重构</del><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;iomanip&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long ll;</span><br><span class="line">typedef long long LL;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">rd</span>()</span>&#123;T x = <span class="number">0</span>;ll f = <span class="number">1</span>; char c = getchar();<span class="keyword">while</span>(c &gt; <span class="string">'9'</span> || c &lt; <span class="string">'0'</span>) f = c == <span class="string">'-'</span> ? <span class="number">-1</span> : <span class="number">1</span>, c = getchar();<span class="keyword">while</span>(c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + c - <span class="number">48</span>, c = getchar();<span class="keyword">return</span> x * f;&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">write</span>(<span class="title">T</span> <span class="title">x</span>)</span>&#123;<span class="keyword">if</span>(x &lt; <span class="number">0</span>)&#123;putchar(<span class="string">'-'</span>), write(-x);<span class="keyword">return</span>;&#125;<span class="keyword">if</span>(x &gt;= <span class="number">10</span>)write(x / <span class="number">10</span>);putchar(x % <span class="number">10</span> + <span class="number">48</span>);&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">write_</span>(<span class="title">T</span> <span class="title">x</span>)</span>&#123;<span class="keyword">if</span>(x &lt; <span class="number">0</span>)&#123;putchar(<span class="string">'-'</span>), write(-x);putchar(<span class="string">' '</span>);<span class="keyword">return</span>;&#125;<span class="keyword">if</span>(x &gt;= <span class="number">10</span>)write(x / <span class="number">10</span>);putchar(x % <span class="number">10</span> + <span class="number">48</span>);putchar(<span class="string">' '</span>);&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">writeln</span>(<span class="title">T</span> <span class="title">x</span>)</span>&#123;<span class="keyword">if</span>(x &lt; <span class="number">0</span>)&#123;putchar(<span class="string">'-'</span>), write(-x);putchar(<span class="string">'\n'</span>);<span class="keyword">return</span>;&#125;<span class="keyword">if</span>(x &gt;= <span class="number">10</span>)write(x / <span class="number">10</span>);putchar(x % <span class="number">10</span> + <span class="number">48</span>);putchar(<span class="string">'\n'</span>);&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">min</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> <span class="title">c</span>)</span>&#123;<span class="keyword">return</span> min(min(a, b), c);&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">max</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> <span class="title">c</span>)</span>&#123;<span class="keyword">return</span> max(max(a, b), c);&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">min</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> <span class="title">c</span>, <span class="title">T</span> <span class="title">d</span>)</span>&#123;<span class="keyword">return</span> min(min(a, b), min(c, d));&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">max</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> <span class="title">c</span>, <span class="title">T</span> <span class="title">d</span>)</span>&#123;<span class="keyword">return</span> max(max(a, b), max(c, d));&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">fpow</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> <span class="title">c</span>)</span>&#123;T ans = <span class="number">1</span>;<span class="keyword">while</span>(b)&#123;<span class="keyword">if</span>(b &amp; <span class="number">1</span>)ans = <span class="number">1</span>ll * ans * a % c; a = <span class="number">1</span>ll * a * a % c;b &gt;&gt;= <span class="number">1</span>;&#125;<span class="keyword">return</span> ans;&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">fpow</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>)</span>&#123;T ans = <span class="number">1</span>;<span class="keyword">while</span>(b)&#123;<span class="keyword">if</span>(b &amp; <span class="number">1</span>)ans = <span class="number">1</span>ll * ans * a;a = <span class="number">1</span>ll * a * a;b &gt;&gt;= <span class="number">1</span>;&#125; <span class="keyword">return</span> ans;&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">gcd</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) </span>&#123;<span class="keyword">if</span>(!b) <span class="keyword">return</span> a;<span class="keyword">return</span> gcd(b, a % b);&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">lcm</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) </span>&#123;<span class="keyword">return</span> a / gcd(a, b) * b;&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">Exgcd</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> &amp;<span class="title">x</span>, <span class="title">T</span> &amp;<span class="title">y</span>) </span>&#123;<span class="keyword">if</span>(b == <span class="number">0</span>)&#123;x = <span class="number">1</span>;y = <span class="number">0</span>;<span class="keyword">return</span>;&#125;Exgcd(b, a % b, x, y);T tp = x;x = y;y = tp - a / b * y;&#125;</span><br><span class="line">#define rdi rd&lt;int&gt;</span><br><span class="line">#define rdl rd&lt;LL&gt;</span><br><span class="line">#define N 2000050</span><br><span class="line">int vad[N], son[N][<span class="number">2</span>], exist[N], val[N], tot[N];</span><br><span class="line">int memory[N], cur[N];</span><br><span class="line">int root, to_rebuild, poi, pool;</span><br><span class="line"><span class="keyword">const</span> double alpha = <span class="number">0.8</span>;</span><br><span class="line">bool isBad(int p) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((double)vad[p] * alpha &lt;= (double) max(vad[son[p][<span class="number">0</span>]], vad[son[p][<span class="number">1</span>]])) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> dfs(int p) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!p) <span class="keyword">return</span>;</span><br><span class="line">    dfs(son[p][<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span> (exist[p]) cur[++poi] = p;</span><br><span class="line">    <span class="keyword">else</span> memory[++pool] = p;</span><br><span class="line">    dfs(son[p][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> build(int l, int r, int &amp;p) &#123;</span><br><span class="line">    int mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    p = cur[mid];</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        son[p][<span class="number">0</span>] = son[p][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        tot[p] = vad[p] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (l &lt; mid) build(l, mid - <span class="number">1</span>, son[p][<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">else</span> son[p][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    build(mid + <span class="number">1</span>, r, son[p][<span class="number">1</span>]);</span><br><span class="line">    tot[p] = tot[son[p][<span class="number">0</span>]] + tot[son[p][<span class="number">1</span>]] + <span class="number">1</span>;</span><br><span class="line">    vad[p] = vad[son[p][<span class="number">0</span>]] + vad[son[p][<span class="number">1</span>]] + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> rebuild(int &amp;p) &#123;</span><br><span class="line">    poi = <span class="number">0</span>;</span><br><span class="line">    dfs(p);</span><br><span class="line">    <span class="keyword">if</span> (poi) build(<span class="number">1</span>, poi, p);</span><br><span class="line">    <span class="keyword">else</span> p = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">int find_rank(int x) &#123;</span><br><span class="line">    int p = root;</span><br><span class="line">    int ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (p) &#123;</span><br><span class="line">        <span class="keyword">if</span> (val[p] &gt;= x) p = son[p][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            ans += vad[son[p][<span class="number">0</span>]] + exist[p];</span><br><span class="line">            p = son[p][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">int kth(int p, int k) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!p) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (vad[son[p][<span class="number">0</span>]] &gt;= k) kth(son[p][<span class="number">0</span>], k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (vad[son[p][<span class="number">0</span>]] + exist[p] &lt; k) <span class="keyword">return</span> kth(son[p][<span class="number">1</span>], k - vad[son[p][<span class="number">0</span>]] - exist[p]);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> val[p];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> ins(int &amp;p, int x) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!p) &#123;</span><br><span class="line">        p = memory[pool--];</span><br><span class="line">        val[p] = x;</span><br><span class="line">        exist[p] = tot[p] = vad[p] = <span class="number">1</span>;</span><br><span class="line">        son[p][<span class="number">0</span>] = son[p][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        tot[p] ++, vad[p] ++;</span><br><span class="line">        <span class="keyword">if</span> (val[p] &gt;= x) ins(son[p][<span class="number">0</span>], x);</span><br><span class="line">        <span class="keyword">else</span> ins(son[p][<span class="number">1</span>], x);</span><br><span class="line">        <span class="keyword">if</span>(isBad(p)) rebuild(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> Del_pos(int &amp;p, int tar) &#123;</span><br><span class="line">    <span class="keyword">if</span> (exist[p] &amp;&amp; vad[son[p][<span class="number">0</span>]] + <span class="number">1</span> == tar) &#123;</span><br><span class="line">        exist[p] = <span class="number">0</span>;</span><br><span class="line">        vad[p] --;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    vad[p] --;</span><br><span class="line">    <span class="keyword">if</span> (vad[son[p][<span class="number">0</span>]] + exist[p] &gt;= tar) Del_pos(son[p][<span class="number">0</span>], tar);</span><br><span class="line">    <span class="keyword">else</span> Del_pos(son[p][<span class="number">1</span>], tar - vad[son[p][<span class="number">0</span>]] - exist[p]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> Del_val(int x) &#123;</span><br><span class="line">    Del_pos(root, find_rank(x));</span><br><span class="line">    <span class="keyword">if</span> ((double)tot[root] * alpha &gt; vad[root]) rebuild(root);</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">2000000</span> ; i &gt;= <span class="number">1</span> ; i--) memory[++pool] = i;</span><br><span class="line">    int m = rdi();</span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">1</span>; i &lt;= m ; i++ ) &#123;</span><br><span class="line">        int op = rdi(), x = rdi();</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>) ins(root, x);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>) Del_val(x);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">3</span>) writeln(find_rank(x));</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">4</span>) writeln(kth(root, x));</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">5</span>) writeln(kth(root, find_rank(x) - <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">6</span>) writeln(kth(root, find_rank(x + <span class="number">1</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="4-Splay"><a href="#4-Splay" class="headerlink" title="4.Splay"></a>4.Splay</h2><p>代码量一般，速度非常慢</p>
<p>可以分裂合并，不能可持久化</p>
<p>大多数人学的平衡树</p>
<h2 id="5-Leftytree-Tree"><a href="#5-Leftytree-Tree" class="headerlink" title="5.Leftytree Tree"></a>5.Leftytree Tree</h2><p>咕咕咕</p>
<h2 id="6-权值线段树"><a href="#6-权值线段树" class="headerlink" title="6.权值线段树"></a>6.权值线段树</h2><p>效率较高，代码量较低</p>
<p>可以分裂合并，可持久化</p>
<p>但是空间较大</p>
<p>为了解决空间问题可以动态开点（多log）或者离线离散化</p>
<h2 id="7-排序向量树"><a href="#7-排序向量树" class="headerlink" title="7.排序向量树"></a>7.排序向量树</h2><p><del>居然能这样做我是真的没想到O(nm)</del></p>
<p>非常好写</p>
<p>但是因为常数问题所以可以过题</p>
<p>查kth是O(1)的</p>
<h2 id="8-AVL-Tree"><a href="#8-AVL-Tree" class="headerlink" title="8.AVL Tree"></a>8.AVL Tree</h2><p>代码量较大，速度一般</p>
<p>如果修改少查询多的话AVL会很有优势，因为AVL的查询非常快</p>
<p>可以分裂合并，可持久化，<del>但是分裂合并不怎么好写</del></p>
<p><del>好像没什么人会？</del></p>
<h2 id="9-B树"><a href="#9-B树" class="headerlink" title="9.B树"></a>9.B树</h2><p>不会</p>
<h2 id="……想到再写吧"><a href="#……想到再写吧" class="headerlink" title="……想到再写吧"></a>……想到再写吧</h2>]]></content>
  </entry>
</search>
