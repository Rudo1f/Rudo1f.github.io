<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>End</title>
    <url>/p/5550ac4b.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="a9f8cf78211b9ab7d9b9139d422b7543a5694535bdb041c49351c407b067422a">1b3be9181175d40d2a364dfa6111861aa6210762336fdfd7372fa1a030ea97d1b0d4b1edaaa4ea97f9e51c7aa5b4dabcd882d1d84f612000342891556d1b4f7f4d8b9cebf2c57b00edfe6a051d2437598c734036b4ef59cab9d3ce99b0c6bd36e0205804495cd52c3508cbcbfacac2273fa6afae5d5523cd43f905fc40340e1dac01ac81ca1b3c21abed5cbcfcebb06bc12a81aff6d9d8f72d0f2974e6faa95b915c8aa8f40bd70273f36d5fa0f8896935a5f1a987db7ab8e6c228fa8fcfb730b289e3ac0d045eb0ffda7d1e6c7a13e4bdb3fe613c4c4dba64b77ce0924b8a9df357280a7f52fdc997fd99aa74a9cdf9b8b4d12b8120c7ec7a78c00e0f3c3661e5ad29161f578aefd87f56fbbd92eb06e5f7e535dc3966fa93c50018ce7c67fe2064978864af59f6602b91603b42da521ca12c1d6293a276b84e2c775c80b7d4e1c22f4474baad1d1196a84ac840b1ec046eb741d441ff1e4b2dcdfbc2678566978a18a03d5e7ce1619cc781c382414bacf74a0aff9f6ce7508aa65a130619fe36ab6b230b2dffb472c60a88abea07e809649664b33c3d0a7d3de9ce2076351b1f4de1cffefcdcc569226d94578793aa2e0b7705438a2298aa06836adb49f04a0fd98e84e511ee973b5c5bcb8d959438a344fb9bbe65b4090c1e8195f2d149f1797e0f40b96281bfc596d4fa402b39a642cb9dba56138ef73eb05d16a2301464671869a80e7d0bb60f17b7e4e38b0564d7f03e87947176f6ecf8c5238a0f31f5bee6de335491effcec7ac6e4262220b67e5d7f82e6f692679761aeed0405aee2f8495d7aae84802f5814bdfdad2cd066befedf03ecbe195fcd6948863cc21bba4504e09f3fbed8a8eacd70d9876f098a8bfac70941dc55d310e78e4dd80867bec64dcc140cd084450eff6ed55e8fec2191346ff5c7874689da90c2ac477de6f4854612f8931fdfae46de779ae4171201ea9c0ceeb2f1820275b03b45d223f9df0bd69e21ea7f8e7da26bef1873764f9cffe1538324e04a324b83232383673163f8d051d602bb75a19b9ff87f9243d69f7f8653085b504e061142076b79141ce97438f382476977157eb4f5cbf57d225f929c188087fcd964157bbd0fe694942507ea72dacb9662bb4fbf8f544f1a6b2da0a082461029c96a7bd194847ffd2dd524cdcbdace0fee6da78ca6b80b5c6d733fa45fd5e76041409ad5f891eea8901cf9a1606be15ee3101004715c8f349babeaaed4f41f80b0d9195e520b32babed23cb63972820e6402a3273bf6ff1ea0d80f31a94963fa6b0387a2d899eec88127641ef0d23ea1b3754e21571a9a47d86fc22f5cc2f189c25817bd91feef987a00b246389b29931fb00a3dc835a05eba420c8500aaf1a240e9b45a3ce5c8dc5f2a1543d50d612e9579fd912f0ff261609d406ff09f1b9538ec8e92d4a1a048540917788801a985d41ceca48e5b3f9dcc919f19f1a92551abc428846a52111cd394ec0018d0f7d4264bcd3ac3bb67d221014c8012fc9084ed02063ddf0a99460f1659201416b8bd4d92c5dcbfb13278d6dcd8f7a2d31bbd238eb68e846ac62b96f1ac33d188ce8ac65284c925204431264c8e8ee915be3fcd8c3dc3f5d3f208520e312055ca1667b38f43dcae354610a53d148c9a555241d18c0ab57b37011df5100bdaf73fce6dc0cf632c29f97e184bbfa8023b6081b1206331d69b39453aa1cf4c8a2e7fb2bd7635019a97b8dabca6a875bef20aba7438d5b2f9b9b8dd3724eee3ac6fee3ef5a8d92e0f8ad5a6d05f55d073eda74654629ad20bed367e123b8b8914537b2326fe19606badc031dee86436590a1a6b0bd495f8a4e8330a52a1fe8965f5d2874b7ff8e3b07d0503b31c8dfa173b0987913886da1f514697edf7db9b60306c7cf141eb45c28a639f1ac0251a78d064e2320d78b6cd441da915cfb3a369996930b4613e0426b4c60232d57257157d1cabcacacf8ea4451efd6eced0756278bf9455b23cc767d42d25a67002c26fde0236067fb745c29d1d89d1b24b2dcd88e131dd735f7b704f6d1e2e111428493f9c9e117f54a60aa772d3635415cb15b72593160c714fb1679fa21e88a48ed09e97c91d50247dabcc2a4ce8bf75cbe7839131b41d24d1a8617a9aa56ad1eb5b7119fb4872873196a952199ca4d5ad92f1a3f9cbd90a015e8cc86b61619510c108da3c3cd5dc0eb5e2e66ee78d69c1eee22a16bf1cb6051b82a5e2078d354ba85dde685f4343ed8a2ea48b40cc298c425e399edbbe7b039b5005110fcb0cf599f77df40b86bacd3e34bff581f8f0a321e7f0edf0f2d282e44ef75b54fee76b711ad2ad27d285b77d7f1c7c9ea749822d43a8af12b1ecaaa330d14dcc34c5687ea9b344b18128c95cee3704d508930910131b81635ab94897ec8a7aa1d02ecb7f197ff74cc6430d5ab2eaad89cb7db9627eaff9dd4f7a4fa8fe221058a07d91457056ddd3e9446e91e4d92573af4bd8e14b9d4a55e3086686280158b617b6b52cf811c33e4f7b9d966dd2f2b2ccb4f556f185446821542802225e1e18885187c61436e3417d11572f2bbe421881b009482516b0a41a504b9c2647d718fd8d3fd62b5f6e512f510dd1ca4f20d8dd86f854c6026f2690f6b0b9d06fdd0ed50f04f31cb4b99931b2943571375876e7038b552a4d3c6aecd0a927c2fa0ab1b67d32b9b393f08851de739cf9412b6afdaef605e0af9d2328f1822799ad9a4c45b360f24484392e57c38eca93da1572975e63e1493ffd830e661355fbc38956ba9b12cbc3fa73e57f88db1be602db27cb0cffef395869419ef9e03c2fe02b3dc6903ca192184e5dd29132bdce0ab31e9151b103b9c6cc1ade4197334c55d5d67e2b8e7d984b0fb60e201b044047d59d275c31c5f4cd14492bed2285657ac48f6b4324fdd01d32bec5443f2a6f3a16898e8147e33b35e066eb737c4da9193478b035332653f98d028fcbe576debbe7614aec5f2104cbb03fa77d2a5b54bd1569378b02b263b6b3b5c90ea105bf4bbc16dc9e96dd71febcd029e46d2b99078a0a80a1864f17908d924e942fa09568c0d263170bce58995fd2e4c6204fde492071e2afb7c5fa7869e75d44a5b78a3c876d7f303457f71295e63b105a95ec11119fd3315d3a7a1e72367d5afb12a8cffb8930f8cff802eed3ca81129b1cb92aee2757bff2dc1221db3de2de314a59c637bacadd089730a0060a6fbd9474e859ec4727f5ed9c8da63b2aeb9230b1ff3ff2ced8d960bb410e66edda395438d35dac34d467c9373647ef6a07d403b0764472ddb07768b3fa7ff012c5c6d5cb4d1a6d6cafa552c9a2864d00c595d72118d88f4ebbf07809ceb2ee334abe66efe89496c38caf23ba76309317ffa2c925043907abdeeeaf59fad9b84c65c3735855746e67e3899d962f7572e6d4bfe4bacc3d0b33aebac34d02a7d6d9f741ba52f9fdfe8f66cadd1547a436e8545502b4fac346c067bbf02002a42d649f419a901222914b6f124ede59aad9818ba86659d2b0c768517f95e9c4ffda9d79020ada2ecaa5156dc0f3af6a0a5a37a5b537ebac0a4ec0365414524d48aa7d8e745f5582ff99313e8e7f4ca90716a1e8b3d3d7083350226ec3f5e9934b63d89bb834cc9d15cf573b17d1cf3cbd6592663fb0f7ec25569e47825c9bf16c6130dc6c536aa0ec4d6d971e4ad2d2eaeb6aca891b904905b1321d14e45db7f75244ec8e03787ecc500647d0f35fb3e6851ba5cc6e3e7211111cfa83c7623812261e1bf1a3284e173c3c341d109cac3c8145ea0a2f848af06f9eb6a6c87567cfe79c7fc245a7c07fbd7f67f70207e7c638c93e18dc52e5d78839b18b81885a2f8c6de4533fe43cf2d25ce93f54c344fdd335d4ac955ee9953fdddb02e8645ab028113b30740035b0dad34b2813bd82fce9210ff12d930f08b890c3637f91a0957654aff74b1a8cb540725cd90622f3b01b3e61cc26563a56a44fc195eb2e917e0acce47362964966555c71f03681d5424fd24227d2e36a3197bef9c87b1eae93d505b8a3630b3f6c55e7155995e077d8097c1925536e4c73f134d86d8d7ce23adbdda26303c059e527ba0a3ae026cf53b5a13963a38977983bd2acac7efce5d94079ac1950880882f60712f455fe1f22be969784c1a4af30a9460a23cc6a488307a53a8a9d5879716d1e735691e51a5db833dad0b6691d16431a1a7c005ff5a342bd87de0925181ca6313a98c2d6e124d549e3f5ac2fa00de4d0f772e59b7156fadf7b9ad7c02c91f560880baf5fca17cc7722e855e0be5b6b1af7e6</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">No reseponse</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>朝花夕拾 一</title>
    <url>/p/5cbc3330.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="295208ee379574aa3eb1201ac33ea6124f119fcccdc25765ae73977aace106f3"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">No reseponse</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>喜欢上一个人</title>
    <url>/p/455b9732.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="0bb0e065568b5df1a1a2cdbb782029932374d42696955a638b4838285c7577cd">1b3be9181175d40d2a364dfa6111861a5ddb6f9db35246db724bac6e4cf5df9f233f463f729d0a87990ef2ca1638aa4eeb40b7f40d30ecb23377a55984eb4e7df92e12e97c617c2a1f4317de8221c05bad13b8e2bd5b3616126d8bfb35fa8b9fe94a70a0e4aa147b03c1a3cb4b3b6a9c61fbad24560c0a133ec585e2ab4c123a6d44bc5346a0ae6a87fd9f49777264893514cb738f83c7e28ed63004dabce56d4c5d99daf5fde292e31c7bfb84414e5bab0d27e0e35987a23e3c5cfb61ec80f6b968111e9d86bb35cee8b726d907e94b4f8fa6b8fb4b9660c2b50827495da20e1dc9390da9e5f9d9d3c95166216ee24f049f5f279d0b02a577e1a571055d0863640f6180f402a1a6035997beb45fa722c83e2271a8f8b67fb98b4019476b077bf7a7e98625933ac721d58ea13b5f527290817f0f59581c8b1a374b6656da7b889a507706aca8236659ea4753f484212ea60d035c76f27a348085b477e812f940a87c06ada7bbd76e8a53e1c9e4ff5a1776efcb20689cae29712233978b1ff5a61fa8d1f4b06870bdc160e25fd9fbfb22267cb47428f3b6f558afa537b750098520557c33beea0de023f9a23f95a4f2be7851a3fe558b0fafee9406a0be9e734d6c3f411d55eb4a33a11c6115f2b2cfe0d4f116df8f5e16f44019214cd1c8aa9bb8b62a0c35266d9fcf7262ecc31e76192d3c2f7cb15c3314bffd99ad42d3278bdc4a771311b354c3a78d30e3ff2e46be37a4a5051d424026ef7804e1f3921fc5881c12adde3cd160185274a05e08cf6fc38af858228a6c52b03ab8b54809e80d5d2e672070decbddead6ad3259b5664b1bb3f52d056369f0e6d3457b6953b610ccf1dcf2fda835b44b9f837fdb9422cce5e6156725d0593aac4cdbd398f1b38a0bdf01a083bd14eda50a14b1b73f63c672a5871a69273937b169217b0ace5f8b70f5b5c4f3672e835168de96b53cd2b3742e30cd57ec222d894e6ba9b6ff4cd3ee230179405fae067421292bb8559c7d7b3d89d7da556369378a54f30585f378145600c190ecc1b0c091fc8eb459a2b2d2bf5ecba8e6db49c4957e5fe41db0d23d5ded26324bce88bc739302d3e2d54e99bae2f12c20bd357b0784a13031d0497e4a611b8b1fcf155e9ca6dbea7bcab8214685e597a9434798a0ef8933df8d4acd8e0c9b3223e84d670c90d7d8401379948dea1bd387f5b63ea794528a1bc9ccccad7088b0e119c8cc106ed6268b9d1d17bf4adb51c5036f8fc7f3a69a710087596f06b42b6b9b826b61f7cefbdc5ed08323a8256d46fa9eea619cc1af40d725a25ab3b4b5d090c2f6f903cf468007b5d10bedd19935ebf956c9a424ed7633e321e8b8ec608a3003012c1f67861091e6</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">No reseponse</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>高等数学小结(1)</title>
    <url>/p/c912e34d.html</url>
    <content><![CDATA[<h4 id="绝对值不等式"><a href="#绝对值不等式" class="headerlink" title="绝对值不等式"></a>绝对值不等式</h4><p>$\displaystyle ||x|-|y|| \leq |x \pm y| \leq |x|+|y|$</p>
<h4 id="调几算平"><a href="#调几算平" class="headerlink" title="调几算平"></a>调几算平</h4><p>调和平均数（harmonic mean）: $\displaystyle H_n=\frac{n}{\sum_\limits{i=1}^{n}\dfrac{1}{a_i}}$</p>
<p>几何平均数（Geometric Mean）: $\displaystyle G_n=\sqrt[n]{\prod_{i=1}^{n}a_i}$</p>
<p>算术平均数（ arithmetic mean）: $\displaystyle A_n=\frac{\sum\limits_{i=1}^{n}a_i}{n}$</p>
<p>平方平均数（quadratic mean）: $\displaystyle Q_n=\sqrt{\frac{\sum\limits_{i=1}^{n}a_i^2}{n}}$</p>
<p>$H_n \leq G_n \leq A_n \leq Q_n$</p>
<h4 id="伯努利不等式"><a href="#伯努利不等式" class="headerlink" title="伯努利不等式"></a>伯努利不等式</h4><p>$x \geq 0, n \in N_+$，则：$\displaystyle (1+x)^n \geq 1 + nx$</p>
<h4 id="有界无界"><a href="#有界无界" class="headerlink" title="有界无界"></a>有界无界</h4><p>有界：$\exists M&gt;0,\forall x \in D, |f(x)| \leq M$</p>
<p>无界：$\forall M&gt;0, \exists x \in D, |f(x)| &gt; M$</p>
<h4 id="单调与严格单调"><a href="#单调与严格单调" class="headerlink" title="单调与严格单调"></a>单调与严格单调</h4><h4 id="最小正周期"><a href="#最小正周期" class="headerlink" title="最小正周期"></a>最小正周期</h4><p>并非每个<strong>周期函数</strong>都有<strong>最小正周期</strong>，如<strong>狄利克雷函数</strong></p>
<h4 id="函数定义："><a href="#函数定义：" class="headerlink" title="函数定义："></a>函数定义：</h4><p>设数集$D \subset R$，则称映射$f:D \rightarrow R$为定义在$D$s上的函数，通常简记为$y=f(x), x \in D$——高等数学p3</p>
]]></content>
      <tags>
        <tag>高等数学</tag>
      </tags>
  </entry>
  <entry>
    <title>不定积分小总结</title>
    <url>/p/4a67a9bc.html</url>
    <content><![CDATA[<blockquote>
<p>  <del>要养成用求导运算来检验不定积分计算结果是否正确的习惯</del></p>
</blockquote>
<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="Ostrogradsky方法（奥斯特罗格拉茨基）"><a href="#Ostrogradsky方法（奥斯特罗格拉茨基）" class="headerlink" title="Ostrogradsky方法（奥斯特罗格拉茨基）"></a>Ostrogradsky方法（奥斯特罗格拉茨基）</h2><h2 id="递推公式法"><a href="#递推公式法" class="headerlink" title="递推公式法"></a>递推公式法</h2><h2 id="欧拉代换法"><a href="#欧拉代换法" class="headerlink" title="欧拉代换法"></a>欧拉代换法</h2><h2 id="二项微分式的积分"><a href="#二项微分式的积分" class="headerlink" title="二项微分式的积分"></a>二项微分式的积分</h2><script type="math/tex; mode=display">
\int{x^m(a+bx^n)^pdx} \quad (m,n和p为有理数)</script><p>仅在下列三种情形下可化为有理函数的积分（切比雪夫定理）：</p>
<p>$\alpha$）$p$为整数，此时令$x=z^N$，其中$N$为分数m和n的公分母</p>
<p>$\beta$）$\dfrac{m+1}{n}$为整数，此时令$a+bx^n=z^N$，其中$N$为分数$p$的分母</p>
<p>$\gamma$) $\dfrac{m+1}{n}+p$为整数，此时利用代换$ax^{-n}+b=z^{N}$，其中$N$为分数$p$的分母</p>
<p>若$n=1$，则这些情形等价于：（1）p为整数（2）m为整数（3）m+p为整数</p>
<h2 id="形如"><a href="#形如" class="headerlink" title="形如"></a>形如</h2><script type="math/tex; mode=display">
\int{sin^mxcos^nxdx} \quad (m,n为整数)</script><p>的积分可利用巧妙的变换或运用递推公式计算</p>
<h2 id="若-a-c-2-b-2-neq-0-，则"><a href="#若-a-c-2-b-2-neq-0-，则" class="headerlink" title="若$(a-c)^2+b^2 \neq 0$，则"></a>若$(a-c)^2+b^2 \neq 0$，则</h2><script type="math/tex; mode=display">
\int{\frac{a_1sinx+b_1cosx}{asin^2x+2bsinxcosx+ccos^2x}dx=A\int{\frac{du_1}{k_1u_1^2+\lambda_1}}}+B\int{\frac{du_2}{k_2u_2^2+\lambda_2}}</script><p>式中A、B为待定系数，$\lambda_1，\lambda_2$为方程</p>
<script type="math/tex; mode=display">
\left|
\begin{array}{c}
a - \lambda & b \\
b & c-\lambda
\end{array}
\right |</script><p>的根，而</p>
<script type="math/tex; mode=display">
u_i=(a-\lambda_i)sinx+bcosx，\quad k_i=\frac{1}{a-\lambda_i} (i=1,2).</script><h2 id="Euler替换"><a href="#Euler替换" class="headerlink" title="Euler替换"></a>Euler替换</h2><p>详情见【数学分析习题演练第一册.周民强】 p340-p343</p>
<h2 id="有理函数的不定积分问题"><a href="#有理函数的不定积分问题" class="headerlink" title="有理函数的不定积分问题"></a>有理函数的不定积分问题</h2><p>只需考察有理真分式：</p>
<script type="math/tex; mode=display">
f(x)=\frac{a_0x^n+a_1x^{n-1}+\dots+a_{n-1}x+a_n}{b_0x^{m}+b_1x^{m-1}+\dots+b_{m-1}x+b_m}</script><p>不难证明，它总可分解为形如下列四种最简真分式的组合：</p>
<p>$\displaystyle \frac{A}{x-a}, \frac{A}{(x-a)^k}(k \geq 2), \frac{Ax+B}{x^2+px+q}, \frac{Ax+B}{(x^2+px+q)^k}(p^2-4q&lt;0; k \geq 2)$</p>
<p>因此，有理分式的不定积分就化归为计算上述四种类型真分式的不定积分：</p>
<p>(i) $\displaystyle \int{\frac{A}{x-a}dx}=Aln|x-a|+C$</p>
<p>(ii) $\displaystyle \int{\frac{A}{(x-a)^k}dx}=A\int{(x-a)^{-k}dx}=A\frac{(x-a)^ {1-k}}{1-k}+C$</p>
<p>(iii)</p>
<script type="math/tex; mode=display">
\begin{align}
\int{\frac{Ax+B}{(x^2+px+q)}dx} 
&= \int{\frac{\frac{A}{2}(2x+p)+(B-\frac{Ap}{2})}{x^2+px+q}dx} \\
&= \frac{A}{2}\int{\frac{2x+p}{x^2+px+q}dx}+(B-\frac{Ap}{2})\int{\frac{dx}{x^2+px+q}} \\
&= \frac{A}{2}ln|x^2+px+q|+(B-\frac{Ap}{2})\int{\frac{dx}{(x+\frac{p}{2})^2+(q-\frac{p^2}{4})}} \\
&= \frac{A}{2}ln|x^2+px+q|+\frac{2B-Ap}{\sqrt{4q-p^2}}arctan{\frac{2x+p}{\sqrt{4q-p^2}}}+C
\end{align}</script><p>(iv) </p>
<script type="math/tex; mode=display">
\begin{align}
\int{\frac{Ax+B}{(x^2+px+q)^k}dx} 
&= \int{\frac{\frac{A}{2}(2x+p)+(B-\frac{Ap}{2})}{(x^2+px+q)^k}dx} \\
&= \frac{A}{2}\int{\frac{2x+p}{(x^2+px+q)^k}+(B-\frac{Ap}{2})\int{\frac{dx}{(x^2+px+q)^k}}} \\
&= \frac{A}{2}I_k+(B-\frac{Ap}{2})J_k
\end{align}</script><p>对于$I_k$，用替换$x^2+px+q=t,dt=(2x+p)dx$，则可得</p>
<script type="math/tex; mode=display">
I_k=\int{\frac{dt}{t^k}=\frac{t^{1-k}}{1-k}}+C=\frac{1}{(1-k)(x^2+px+q)^{k-1}}+C</script><p>注意到$\displaystyle q-\frac{p^2}{4}&gt;0$，故可对$J_k$用替换$\displaystyle x+\frac{p}{2}=t,dx=dt,q-\frac{p^2}{4}=t^2$，则可得</p>
<script type="math/tex; mode=display">
\begin{align}
J_k 
&= \int{\frac{dx}{[(x+\frac{p}{2})^2+(q-\frac{p^2}4)]^k}} \\
&= \int{\frac{dt}{(t^2+l^2)^k}} \\
&= \frac{1}{l^2}\int{\frac{(t^2+l^2)-t^2}{(t^2+l^2)^k}dt} \\
&= \frac{1}{l^2}\int{\frac{dt}{(t^2+l^2)^{k-1}}}-\frac{1}{l^2}\int{\frac{t^2}{(t^2+l^2)^k}dt}
\end{align}</script><p>上式最后一项不定积分又可分解为</p>
<script type="math/tex; mode=display">
\begin{align}
\int{\frac{t^2}{(t^2+l^2)^k}dt} &= \frac{1}{2}\int{t\frac{d(t^2+l^2)}{(t^2+l^2)^k}} \\
&=-\frac{1}{2(k-1)}\int{td(\frac{1}{(t^2+l^2)^{k-1}})} \\
&=-\frac{1}{2(k-1)}[t\frac{1}{(t^2+l^2)^{k-1}}-\int{\frac{dt}{(t^2+l^2)^{k-1}}}] 
\end{align}</script><p>那么有</p>
<script type="math/tex; mode=display">
\begin{align}
J_k &= \int{\frac{dt}{(t^2+l^2)^k}} \\
&=\frac{1}{l^2}\int{\frac{dt}{(t^2+l^2)^{k-1}}}+\frac{1}{l^2}\frac{1}{2(k-1)}[\frac{t}{(t^2+l^2)^{k-1}}-\int{\frac{dt}{(t^2+l^2)^{k-1}}}] \\
&= \frac{t}{2l^2(k-1)(t^2+l^2)^{k-1}}+\frac{2k-3}{2l^2(k-1)}\int{\frac{dt}{(t^2+l^2)^{k-1}}}
\end{align}</script><p>上式右端之不定积分于$J_k$型类似，只不过这里的方幂已经下降为$k-1$，可记为$J_{k-1}$。这就是说，不定积分$J_k$可用$J_{k-1}$表示出。因此，继续上述计算过程，最终将化归为下述不定积分：</p>
<script type="math/tex; mode=display">
\int{\frac{dt}{t^2+l^2}=\frac{1}{l}arctan{\frac{t}{l}}+C}</script><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><p>(1)</p>
<p>$ \displaystyle I = \frac{1}{2}\int{x^2\sqrt{x^{2}+1}} $</p>
<p>因为</p>
<script type="math/tex; mode=display">
\displaystyle (x^3\sqrt{x^2+1})'=3x^2\sqrt{x^2+1}+\frac{x^4}{\sqrt{x^2+1}}=4x^2\sqrt{x^2+1}-\sqrt{x^2+1}+\frac{1}{\sqrt{x^2+1}}</script><p> ​<br>所以 </p>
<script type="math/tex; mode=display">
\displaystyle\ x^2\sqrt{x^2+1} =\frac{1}{4}[(x^3\sqrt{x^2+1})'+\sqrt{x^2+1}-\frac{1}{\sqrt{x^2+1}}]</script><p> ​<br>于是</p>
<script type="math/tex; mode=display">
\displaystyle I=\frac{1}{4}[x^3\sqrt{x^2+1}+\frac{x}{2}\sqrt{x^2+1}-\frac{1}{2}ln(x+\sqrt{x^2+1})]+C</script><p>(2)</p>
<p> 结合(1)可设计不定积分$\displaystyle\int{x^k\sqrt{x^2+1}dx}$和$\displaystyle\int{\frac{x^k}{\sqrt{x^2+1}}}$的一般解法</p>
<script type="math/tex; mode=display">
\begin{align}
\int{x^k\sqrt{x^2+1}dx} &=\frac{1}{k+1}\int{\sqrt{x^2+1}dx^{k+1}} \\
&= \frac{x^{k+1}\sqrt{x^2+1}}{k+1} -\frac{1}{k+1}\int{x^{k+1}d{\sqrt{x^2+1}}} \\
&= \frac{x^{k+1}\sqrt{x^2+1}}{k+1} - \frac{1}{k+1}\int{\frac{x^{k+2}}{\sqrt{x^2+1}}} \\
\therefore \frac{1}{k+1}\int{\frac{x^{k+2}}{\sqrt{x^2+1}}} &= \frac{x^{k+1}\sqrt{x^2+1}}{k+1} - \int{x^k\sqrt{x^2+1}dx} \\
\int{\frac{x^{k+2}}{\sqrt{x^2+1}}} &= x^{k+1}\sqrt{x^2+1}-(k+1)\int{x^k\sqrt{x^2+1}dx} \\
\end{align}</script><p>(3)</p>
<script type="math/tex; mode=display">
I_{m+1} = \frac{u}{2a^2m(u^2+a^2)m} + \frac{2m-1}{2a^2m}I_m, \quad I_m = \int{\frac{du}{(u^2+a^2)^m}} \\

\begin{aligned}
Prove:\int{\frac{du}{(u^2+a^2)^m}} &= \frac{u}{(u^2+a^2)^m}-\int{ud\frac{1}{(u^2+a^2)^m}} \\
&=\frac{u}{(u^2+a^2)^m} + m\int{\frac{2u^2}{(u^2+a^2)^{m+1}}du} \\
&=\frac{u}{(u^2+a^2)^m} + 2m(\int{\frac{1}{(u^2+a^2)^m}du - \int{\frac{a^2}{(u^2+a^2)^{m+1}}du}}) \\
2ma^2\int{\frac{du}{(u^2+a^2)^{m+1}}} &= \frac{u}{(u^2+a^2)^m} + (2m-1)\int{\frac{1}{(u^2+a^2)^m}du} \\
\int{\frac{du}{(u^2+a^2)^{m+1}}} &= \frac{u}{2a^2m(u^2+a^2)m} + \frac{2m-1}{2a^2m}\int{\frac{du}{(u^2+a^2)^m}}
\end{aligned}</script><p>(4) $I=\displaystyle\int{\frac{sinxdx}{asinx+bcosx}}, J=\int\frac{cosxdx}{asinx+bcosx}$</p>
<script type="math/tex; mode=display">
\begin{cases}
aI+bJ=\displaystyle\int{dx} \\
aJ-bI=\displaystyle\int{\frac{acosx-bsinxdx}{asinx+bcosx}}=\displaystyle\int{\frac{(asinx+bcosx)'dx}{asinx+bcosx}} =ln|asinx+bcosx|+C\\
\end{cases}</script><p>(5) 设对正整数$\displaystyle m,n$，定义$\displaystyle I(m,n)=\int{cos^mxsin^nxdx}$ （练习）【数学分析习题课讲义p287，p289】</p>
<script type="math/tex; mode=display">
\displaystyle 
I(m,n)=\frac{cos^{m-1}xsin^{n+1}x}{m+n}+\frac{m-1}{m+n}I(m-2,n) \\
I(m,n)=-\frac{sin^{n-1}xcos^{m+1}x}{m+n}+\frac{n-1}{m+n}I(m,n-2) \\
I(n,n)=-\frac{cos2xsin^{n-1}2x}{n*2^{n+1}}+\frac{n-1}{4n}I(n-2,n-2)</script><p>(6) 设对正整数$n&gt;2$，定义$\displaystyle I_n=\int{\frac{sinnx}{cosx}dx}$</p>
<script type="math/tex; mode=display">
\begin{align}
I_n &= \int{\frac{sin(n-1)xcosx+sinxcos(n-1)x}{sinx}dx} \\
&= \int{\frac{sin(n-1)xcosx}{sinx}dx+\int{cos(n-1)xdx}} \\
&= \frac{1}{2}\int{\frac{sinnx+sin(n-2)x}{sinx}dx}+\int{cos(n-1)xdx} \\
&= \frac{1}{2}I_n+\frac{1}{2}I_{n-2}+\frac{1}{n-1}sin(n-1)x \\
I_n &= \frac{2}{n-1}sin(n-1)x+I_{n-2}
\end{align}</script>]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>高等数学</tag>
        <tag>Skills</tag>
      </tags>
  </entry>
  <entry>
    <title>任意模数NTT</title>
    <url>/p/dccbe9f5.html</url>
    <content><![CDATA[<p> NTT优缺点：</p>
<p> <strong>能取模</strong><br><del>FFT的复数你给我来取个模</del></p>
<p><strong>没有精度差</strong><br>FFT浮点数的精度怎么也会出一点问题</p>
<p><strong>一般来说常数小</strong><br>由于均为整数操作（虽然取模多）<br><del>NTT常数小，通常比一大堆浮点运算的FFT要快</del>(通常嘛）</p>
<p>教程和板子网上都有，就不仔细写了</p>
<p>讲一下任意模数NTT</p>
<p>众所周知，为了满足单位根的性质，$NTT$需要质数模数，而且需要质数模数能写成<br>$p=a*2^k+1$的形式</p>
<p>比较常用的有998244353,1004535809,469762049，这三个原根都是3</p>
<p>任意模数咋整好？</p>
<p>$n$次多项式在模$m$下乘积，最终系数一定不会大于$nm^2$所以找三个模数分别做$NTT$再使用$CRT$合并一下就好了，大概范围是$10^{26}$</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//P4245</span></span><br><span class="line">#pragma GCC optimize(2) </span><br><span class="line">#pragma GCC optimize(3) </span><br><span class="line">#pragma GCC optimize("Ofast")</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long ll;</span><br><span class="line">typedef long long LL;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">rd</span>()</span>&#123;T x=<span class="number">0</span>;ll f=<span class="number">1</span>;char c=getchar();<span class="keyword">while</span>(c&gt;<span class="string">'9'</span>||c&lt;<span class="string">'0'</span>) f=c==<span class="string">'-'</span>?<span class="number">-1</span>:<span class="number">1</span>,c=getchar();<span class="keyword">while</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>)x=x*<span class="number">10</span>+c<span class="number">-48</span>,c=getchar();<span class="keyword">return</span> x*f;&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">write</span>(<span class="title">T</span> <span class="title">x</span>)</span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)&#123;putchar(<span class="string">'-'</span>),write(-x);<span class="keyword">return</span>;&#125;<span class="keyword">if</span>(x&gt;=<span class="number">10</span>)write(x/<span class="number">10</span>);putchar(x%<span class="number">10</span>+<span class="number">48</span>);&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">write_</span>(<span class="title">T</span> <span class="title">x</span>)</span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)&#123;putchar(<span class="string">'-'</span>),write(-x);putchar(<span class="string">' '</span>);<span class="keyword">return</span>;&#125;<span class="keyword">if</span>(x&gt;=<span class="number">10</span>)write(x/<span class="number">10</span>);putchar(x%<span class="number">10</span>+<span class="number">48</span>);putchar(<span class="string">' '</span>);&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">writeln</span>(<span class="title">T</span> <span class="title">x</span>)</span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)&#123;putchar(<span class="string">'-'</span>),write(-x);putchar(<span class="string">'\n'</span>);<span class="keyword">return</span>;&#125;<span class="keyword">if</span>(x&gt;=<span class="number">10</span>)write(x/<span class="number">10</span>);putchar(x%<span class="number">10</span>+<span class="number">48</span>);putchar(<span class="string">'\n'</span>);&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">min</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> <span class="title">c</span>)</span>&#123;<span class="keyword">return</span> min(min(a, b), c);&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">max</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> <span class="title">c</span>)</span>&#123;<span class="keyword">return</span> max(max(a, b), c);&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">min</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> <span class="title">c</span>, <span class="title">T</span> <span class="title">d</span>)</span>&#123;<span class="keyword">return</span> min(min(a, b), min(c, d));&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">max</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> <span class="title">c</span>, <span class="title">T</span> <span class="title">d</span>)</span>&#123;<span class="keyword">return</span> max(max(a, b), max(c, d));&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">U</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">amin</span>(<span class="title">T</span> &amp;<span class="title">x</span>, <span class="title">U</span> <span class="title">y</span>) </span>&#123; <span class="keyword">if</span>(x &gt; y) x = y; &#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">U</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">amax</span>(<span class="title">T</span> &amp;<span class="title">x</span>, <span class="title">U</span> <span class="title">y</span>) </span>&#123; <span class="keyword">if</span>(x &lt; y) x = y; &#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">fpow</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> <span class="title">c</span>)</span>&#123;T ans = <span class="number">1</span>;<span class="keyword">while</span>(b)&#123;<span class="keyword">if</span>(b &amp; <span class="number">1</span>)ans = <span class="number">1</span>ll * ans * a % c; a = <span class="number">1</span>ll * a * a % c;b &gt;&gt;= <span class="number">1</span>;&#125;<span class="keyword">return</span> ans;&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">fpow</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>)</span>&#123;T ans = <span class="number">1</span>;<span class="keyword">while</span>(b)&#123;<span class="keyword">if</span>(b &amp; <span class="number">1</span>)ans = <span class="number">1</span>ll * ans * a;a = <span class="number">1</span>ll * a * a;b &gt;&gt;= <span class="number">1</span>;&#125; <span class="keyword">return</span> ans;&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">mul</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> <span class="title">p</span>) </span>&#123;LL re = <span class="number">0</span>;<span class="keyword">for</span> (; b; b &gt;&gt;= <span class="number">1</span>, a = (a + a) % p)<span class="keyword">if</span> (b &amp; <span class="number">1</span>) re = (re + a) % p;<span class="keyword">return</span> re;&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">inv</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) </span>&#123;<span class="keyword">return</span> fpow(a, b - <span class="number">2</span>, b);&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">gcd</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) </span>&#123;<span class="keyword">if</span>(!b) <span class="keyword">return</span> a;<span class="keyword">return</span> gcd(b, a % b);&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">lcm</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) </span>&#123;<span class="keyword">return</span> a / gcd(a, b) * b;&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">Exgcd</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> &amp;<span class="title">x</span>, <span class="title">T</span> &amp;<span class="title">y</span>) </span>&#123;<span class="keyword">if</span>(b == <span class="number">0</span>)&#123;x = <span class="number">1</span>;y = <span class="number">0</span>;<span class="keyword">return</span>;&#125;Exgcd(b, a % b, x, y);T tp = x;x = y;y = tp - a / b * y;&#125;</span><br><span class="line">#define rdi rd&lt;int&gt;</span><br><span class="line">#define rdl rd&lt;LL&gt;</span><br><span class="line">#define N 400005</span><br><span class="line">int len, len1, len2, mod, lim = <span class="number">1</span>, L = <span class="number">0</span>;</span><br><span class="line">int rev[N], F[N], G[N], A[N][<span class="number">3</span>], B[N][<span class="number">3</span>], ans[N];</span><br><span class="line">int pr[<span class="number">3</span>] = &#123;<span class="number">469762049</span>, <span class="number">998244353</span>, <span class="number">1004535809</span>&#125;;</span><br><span class="line">int inv(int a, int b) &#123;<span class="keyword">return</span> fpow(a, b - <span class="number">2</span>, b);&#125;</span><br><span class="line"><span class="keyword">void</span> NTTA(int u, int lim, int type) &#123;</span><br><span class="line">    int p = pr[u];</span><br><span class="line">    int inv3 = fpow(<span class="number">3</span>, p - <span class="number">2</span>, p);</span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">0</span> ; i &lt; lim ; i++ )</span><br><span class="line">        <span class="keyword">if</span> (i &lt; rev[i]) swap(A[i][u], A[rev[i]][u]);</span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">1</span> ; i &lt; lim ; i &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        int wn = fpow(type == <span class="number">1</span> ? <span class="number">3</span> : inv3, (p - <span class="number">1</span>) / (i &lt;&lt; <span class="number">1</span>), p);</span><br><span class="line">        <span class="keyword">for</span> (int j = <span class="number">0</span> ; j &lt; lim ; j += i &lt;&lt; <span class="number">1</span>) &#123;</span><br><span class="line">            LL w = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (int k = <span class="number">0</span> ; k &lt; i ; k ++, w = (w * wn) % p) &#123;</span><br><span class="line">                int x = A[j + k][u], y = <span class="number">1</span>ll * w * A[j + k + i][u] % p;</span><br><span class="line">                A[j + k][u] = (<span class="number">1</span>ll * x + y + p) % p;</span><br><span class="line">                A[j + k + i][u] = (<span class="number">1</span>ll * x - y + p) % p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (type == <span class="number">-1</span>) &#123;</span><br><span class="line">        int inv = fpow(lim, p - <span class="number">2</span>, p);</span><br><span class="line">        <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; lim ; i ++) A[i][u] = <span class="number">1</span>ll * A[i][u] * inv % p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> NTTB(int u, int lim, int type) &#123;</span><br><span class="line">    int p = pr[u];</span><br><span class="line">    int inv3 = fpow(<span class="number">3</span>, p - <span class="number">2</span>, p);</span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">0</span> ; i &lt; lim ; i++ )</span><br><span class="line">        <span class="keyword">if</span> (i &lt; rev[i]) swap(B[i][u], B[rev[i]][u]);</span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">1</span> ; i &lt; lim ; i &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        int wn = fpow(type == <span class="number">1</span> ? <span class="number">3</span> : inv3, (p - <span class="number">1</span>) / (i &lt;&lt; <span class="number">1</span>), p);</span><br><span class="line">        <span class="keyword">for</span> (int j = <span class="number">0</span> ; j &lt; lim ; j += i &lt;&lt; <span class="number">1</span>) &#123;</span><br><span class="line">            LL w = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (int k = <span class="number">0</span> ; k &lt; i ; k ++, w = (w * wn) % p) &#123;</span><br><span class="line">                int x = B[j + k][u], y = <span class="number">1</span>ll * w * B[j + k + i][u] % p;</span><br><span class="line">                B[j + k][u] = (<span class="number">1</span>ll * x + y + p) % p;</span><br><span class="line">                B[j + k + i][u] = (<span class="number">1</span>ll * x - y + p) % p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (type == <span class="number">-1</span>) &#123;</span><br><span class="line">        int inv = fpow(lim, p - <span class="number">2</span>, p);</span><br><span class="line">        <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; lim ; i ++) B[i][u] = <span class="number">1</span>ll * B[i][u] * inv % p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> CRT()&#123;</span><br><span class="line">    len = len1 + len2;</span><br><span class="line">    LL a, b, c, t, k, M = <span class="number">1</span>ll * pr[<span class="number">0</span>] * pr[<span class="number">1</span>];</span><br><span class="line">    LL inv1 = inv(pr[<span class="number">1</span>], pr[<span class="number">0</span>]), inv0 = inv(pr[<span class="number">0</span>], pr[<span class="number">1</span>]),inv3 = inv(M % pr[<span class="number">2</span>], pr[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt;= len ; i++ ) &#123;</span><br><span class="line">        a = A[i][<span class="number">0</span>], b = A[i][<span class="number">1</span>], c = A[i][<span class="number">2</span>];</span><br><span class="line">        t = (mul(a * pr[<span class="number">1</span>] % M, inv1, M) + mul(b * pr[<span class="number">0</span>] % M, inv0, M)) % M;</span><br><span class="line">        k = ((c - t % pr[<span class="number">2</span>]) % pr[<span class="number">2</span>] + pr[<span class="number">2</span>]) % pr[<span class="number">2</span>] * inv3 % pr[<span class="number">2</span>];</span><br><span class="line">        ans[i] = ((k % mod) * (M % mod) % mod + t % mod) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">    len1 = rdi(), len2 = rdi(), mod = rdi();</span><br><span class="line">    <span class="keyword">while</span> (lim &lt;= (len1 + len2)) lim &lt;&lt;= <span class="number">1</span>, L ++;</span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">0</span> ; i &lt; lim ; i++ )rev[i] = (rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (L - <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">0</span> ; i &lt;= len1 ; i++ ) F[i] = rdi(), A[i][<span class="number">2</span>] = A[i][<span class="number">1</span>] = A[i][<span class="number">0</span>] = F[i];</span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">0</span> ; i &lt;= len2 ; i++ ) G[i] = rdi(), B[i][<span class="number">2</span>] = B[i][<span class="number">1</span>] = B[i][<span class="number">0</span>] = G[i];</span><br><span class="line">    <span class="keyword">for</span> (int u = <span class="number">0</span> ; u &lt;= <span class="number">2</span> ; u++ ) &#123; </span><br><span class="line">        NTTA(u, lim, <span class="number">1</span>), NTTB(u, lim, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (int i = <span class="number">0</span> ; i &lt; lim ; i++ ) A[i][u] = <span class="number">1</span>ll * A[i][u] * B[i][u] % pr[u];</span><br><span class="line">        NTTA(u, lim, <span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    CRT();</span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">0</span> ; i &lt;= len ; i++ ) write_(ans[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>几种常见平衡树</title>
    <url>/p/cab1520f.html</url>
    <content><![CDATA[<p>题目源于P3369</p>
<h2 id="0-永远的神RedBlackTree"><a href="#0-永远的神RedBlackTree" class="headerlink" title="0.永远的神RedBlackTree"></a>0.永远的神RedBlackTree</h2><p>碾压性的速度优势和<del>代码量</del></p>
<p>可以分裂合并，但是是log方的，可以可持久化</p>
<p>引用某个OIer的话：<del>在我心中红黑树的难度和线段树是一样的</del></p>
<p><del>不就800行代码嘛我秒杀</del></p>
<h2 id="1-普通-Treap"><a href="#1-普通-Treap" class="headerlink" title="1.普通 Treap"></a>1.普通 Treap</h2><p>代码量小，速度较快</p>
<p>不能分裂合并，可以可持久化</p>
<p>挺好的</p>
<p><del>逻辑理清楚就一下子写好了，坑点较少</del><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long ll;</span><br><span class="line">typedef long long LL;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">rd</span>()</span>&#123;T x = <span class="number">0</span>;ll f = <span class="number">1</span>; char c = getchar();<span class="keyword">while</span>(c &gt; <span class="string">'9'</span> || c &lt; <span class="string">'0'</span>) f = c == <span class="string">'-'</span> ? <span class="number">-1</span> : <span class="number">1</span>, c = getchar();<span class="keyword">while</span>(c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + c - <span class="number">48</span>, c = getchar();<span class="keyword">return</span> x * f;&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">write</span>(<span class="title">T</span> <span class="title">x</span>)</span>&#123;<span class="keyword">if</span>(x &lt; <span class="number">0</span>)&#123;putchar(<span class="string">'-'</span>), write(-x);<span class="keyword">return</span>;&#125;<span class="keyword">if</span>(x &gt;= <span class="number">10</span>)write(x / <span class="number">10</span>);putchar(x % <span class="number">10</span> + <span class="number">48</span>);&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">write_</span>(<span class="title">T</span> <span class="title">x</span>)</span>&#123;<span class="keyword">if</span>(x &lt; <span class="number">0</span>)&#123;putchar(<span class="string">'-'</span>), write(-x);putchar(<span class="string">' '</span>);<span class="keyword">return</span>;&#125;<span class="keyword">if</span>(x &gt;= <span class="number">10</span>)write(x / <span class="number">10</span>);putchar(x % <span class="number">10</span> + <span class="number">48</span>);putchar(<span class="string">' '</span>);&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">writeln</span>(<span class="title">T</span> <span class="title">x</span>)</span>&#123;<span class="keyword">if</span>(x &lt; <span class="number">0</span>)&#123;putchar(<span class="string">'-'</span>), write(-x);putchar(<span class="string">'\n'</span>);<span class="keyword">return</span>;&#125;<span class="keyword">if</span>(x &gt;= <span class="number">10</span>)write(x / <span class="number">10</span>);putchar(x % <span class="number">10</span> + <span class="number">48</span>);putchar(<span class="string">'\n'</span>);&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">min</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> <span class="title">c</span>)</span>&#123;<span class="keyword">return</span> min(min(a, b), c);&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">max</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> <span class="title">c</span>)</span>&#123;<span class="keyword">return</span> max(max(a, b), c);&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">min</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> <span class="title">c</span>, <span class="title">T</span> <span class="title">d</span>)</span>&#123;<span class="keyword">return</span> min(min(a, b), min(c, d));&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">max</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> <span class="title">c</span>, <span class="title">T</span> <span class="title">d</span>)</span>&#123;<span class="keyword">return</span> max(max(a, b), max(c, d));&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">fpow</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> <span class="title">c</span>)</span>&#123;T ans = <span class="number">1</span>;<span class="keyword">while</span>(b)&#123;<span class="keyword">if</span>(b &amp; <span class="number">1</span>)ans = <span class="number">1</span>ll * ans * a % c; a = <span class="number">1</span>ll * a * a % c;b &gt;&gt;= <span class="number">1</span>;&#125;<span class="keyword">return</span> ans;&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">fpow</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>)</span>&#123;T ans = <span class="number">1</span>;<span class="keyword">while</span>(b)&#123;<span class="keyword">if</span>(b &amp; <span class="number">1</span>)ans = <span class="number">1</span>ll * ans * a;a = <span class="number">1</span>ll * a * a;b &gt;&gt;= <span class="number">1</span>;&#125; <span class="keyword">return</span> ans;&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">gcd</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) </span>&#123;<span class="keyword">if</span>(!b) <span class="keyword">return</span> a;<span class="keyword">return</span> gcd(b, a % b);&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">lcm</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) </span>&#123;<span class="keyword">return</span> a / gcd(a, b) * b;&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">Exgcd</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> &amp;<span class="title">x</span>, <span class="title">T</span> &amp;<span class="title">y</span>) </span>&#123;<span class="keyword">if</span>(b == <span class="number">0</span>)&#123;x = <span class="number">1</span>;y = <span class="number">0</span>;<span class="keyword">return</span>;&#125;Exgcd(b, a % b, x, y);T tp = x;x = y;y = tp - a / b * y;&#125;</span><br><span class="line">#define rdi rd&lt;int&gt;</span><br><span class="line">#define rdl rd&lt;LL&gt;</span><br><span class="line">#define N 100005</span><br><span class="line">#define inf 0x3f3f3f3f</span><br><span class="line">int v[N], siz[N], dat[N], num[N];</span><br><span class="line">int son[N][<span class="number">2</span>];</span><br><span class="line">int tot, root;</span><br><span class="line"><span class="keyword">void</span> pushup(int o) &#123;</span><br><span class="line">    siz[o] = siz[son[o][<span class="number">0</span>]] + siz[son[o][<span class="number">1</span>]] + num[o];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> Rotate(int &amp;p, int d) &#123;</span><br><span class="line">    int k = son[p][d ^ <span class="number">1</span>];</span><br><span class="line">    son[p][d ^ <span class="number">1</span>] = son[k][d];</span><br><span class="line">    son[k][d] = p;</span><br><span class="line">    pushup(p);</span><br><span class="line">    pushup(k);</span><br><span class="line">    p = k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> ins(int &amp;p, int x) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!p) &#123;</span><br><span class="line">        p = ++tot;</span><br><span class="line">        v[p] = x;</span><br><span class="line">        siz[p] = num[p] = <span class="number">1</span>;</span><br><span class="line">        dat[p] = rand();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (v[p] == x) &#123;</span><br><span class="line">        num[p]++;</span><br><span class="line">        siz[p]++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    int d = (x &gt; v[p]);</span><br><span class="line">    ins(son[p][d], x);</span><br><span class="line">    <span class="keyword">if</span> (dat[p] &lt; dat[son[p][d]]) Rotate(p, d ^ <span class="number">1</span>);</span><br><span class="line">    pushup(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> del(int &amp;p, int x) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!p) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; v[p]) del(son[p][<span class="number">0</span>], x);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; v[p]) del(son[p][<span class="number">1</span>], x);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!son[p][<span class="number">0</span>] &amp;&amp; !son[p][<span class="number">1</span>]) &#123;</span><br><span class="line">            num[p] --;</span><br><span class="line">            siz[p] --;</span><br><span class="line">            <span class="keyword">if</span> (num[p] == <span class="number">0</span>) p = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!son[p][<span class="number">0</span>] &amp;&amp; son[p][<span class="number">1</span>]) &#123;</span><br><span class="line">            Rotate(p, <span class="number">0</span>);</span><br><span class="line">            del(son[p][<span class="number">0</span>], x);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (son[p][<span class="number">0</span>] &amp;&amp; !son[p][<span class="number">1</span>]) &#123;</span><br><span class="line">            Rotate(p, <span class="number">1</span>);</span><br><span class="line">            del(son[p][<span class="number">1</span>], x);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            int d = (dat[son[p][<span class="number">0</span>]] &gt; dat[son[p][<span class="number">1</span>]]);</span><br><span class="line">            Rotate(p, d);</span><br><span class="line">            del(son[p][d], x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    pushup(p);</span><br><span class="line">&#125;</span><br><span class="line">int rnk(int p, int x) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!p) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (v[p] == x) <span class="keyword">return</span> siz[son[p][<span class="number">0</span>]] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (v[p] &lt; x) <span class="keyword">return</span> siz[son[p][<span class="number">0</span>]] + num[p] + rnk(son[p][<span class="number">1</span>], x);</span><br><span class="line">    <span class="keyword">if</span> (v[p] &gt; x) <span class="keyword">return</span> rnk(son[p][<span class="number">0</span>], x);</span><br><span class="line">&#125;</span><br><span class="line">int find(int p, int x) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!p) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (siz[son[p][<span class="number">0</span>]] &gt;= x) find(son[p][<span class="number">0</span>], x);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (siz[son[p][<span class="number">0</span>]] + num[p] &lt; x) <span class="keyword">return</span> find(son[p][<span class="number">1</span>], x - siz[son[p][<span class="number">0</span>]] - num[p]);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> v[p];</span><br><span class="line">&#125;</span><br><span class="line">int pre(int p, int x) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!p) <span class="keyword">return</span> -inf;</span><br><span class="line">    <span class="keyword">if</span> (v[p] &gt;= x) <span class="keyword">return</span> pre(son[p][<span class="number">0</span>], x);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> max(v[p], pre(son[p][<span class="number">1</span>], x));</span><br><span class="line">&#125;</span><br><span class="line">int suc(int p, int x) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!p) <span class="keyword">return</span> inf;</span><br><span class="line">    <span class="keyword">if</span> (v[p] &lt;= x) <span class="keyword">return</span> suc(son[p][<span class="number">1</span>], x);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> min(v[p], suc(son[p][<span class="number">0</span>], x));</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">    int n = rdi();</span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">1</span> ; i &lt;= n ; i++ ) &#123;</span><br><span class="line">        int op = rdi(), x = rdi();</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>) ins(root, x);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>) del(root, x);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">3</span>) writeln(rnk(root, x));</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">4</span>) writeln(find(root, x));</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">5</span>) writeln(pre(root, x));</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">6</span>) writeln(suc(root, x));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="2-FHQ-Treap"><a href="#2-FHQ-Treap" class="headerlink" title="2.FHQ Treap"></a>2.FHQ Treap</h2><p>代码量小，速度非常慢（这个其实看写法，我写的都很慢）</p>
<p>可以分裂合并可持久化，功能挺多的</p>
<p><del>但是速度实在慢</del></p>
<p>核心在于Split和Mergy两个操作，注意函数里的&amp;<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;iomanip&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;ctime&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long ll;</span><br><span class="line">typedef long long LL;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">rd</span>()</span>&#123;T x = <span class="number">0</span>;ll f = <span class="number">1</span>; char c = getchar();<span class="keyword">while</span>(c &gt; <span class="string">'9'</span> || c &lt; <span class="string">'0'</span>) f = c == <span class="string">'-'</span> ? <span class="number">-1</span> : <span class="number">1</span>, c = getchar();<span class="keyword">while</span>(c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + c - <span class="number">48</span>, c = getchar();<span class="keyword">return</span> x * f;&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">write</span>(<span class="title">T</span> <span class="title">x</span>)</span>&#123;<span class="keyword">if</span>(x &lt; <span class="number">0</span>)&#123;putchar(<span class="string">'-'</span>), write(-x);<span class="keyword">return</span>;&#125;<span class="keyword">if</span>(x &gt;= <span class="number">10</span>)write(x / <span class="number">10</span>);putchar(x % <span class="number">10</span> + <span class="number">48</span>);&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">write_</span>(<span class="title">T</span> <span class="title">x</span>)</span>&#123;<span class="keyword">if</span>(x &lt; <span class="number">0</span>)&#123;putchar(<span class="string">'-'</span>), write(-x);putchar(<span class="string">' '</span>);<span class="keyword">return</span>;&#125;<span class="keyword">if</span>(x &gt;= <span class="number">10</span>)write(x / <span class="number">10</span>);putchar(x % <span class="number">10</span> + <span class="number">48</span>);putchar(<span class="string">' '</span>);&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">writeln</span>(<span class="title">T</span> <span class="title">x</span>)</span>&#123;<span class="keyword">if</span>(x &lt; <span class="number">0</span>)&#123;putchar(<span class="string">'-'</span>), write(-x);putchar(<span class="string">'\n'</span>);<span class="keyword">return</span>;&#125;<span class="keyword">if</span>(x &gt;= <span class="number">10</span>)write(x / <span class="number">10</span>);putchar(x % <span class="number">10</span> + <span class="number">48</span>);putchar(<span class="string">'\n'</span>);&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">min</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> <span class="title">c</span>)</span>&#123;<span class="keyword">return</span> min(min(a, b), c);&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">max</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> <span class="title">c</span>)</span>&#123;<span class="keyword">return</span> max(max(a, b), c);&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">min</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> <span class="title">c</span>, <span class="title">T</span> <span class="title">d</span>)</span>&#123;<span class="keyword">return</span> min(min(a, b), min(c, d));&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">max</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> <span class="title">c</span>, <span class="title">T</span> <span class="title">d</span>)</span>&#123;<span class="keyword">return</span> max(max(a, b), max(c, d));&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">U</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">amin</span>(<span class="title">T</span> &amp;<span class="title">x</span>, <span class="title">U</span> <span class="title">y</span>) </span>&#123; <span class="keyword">if</span>(x &gt; y) x = y; &#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">U</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">amax</span>(<span class="title">T</span> &amp;<span class="title">x</span>, <span class="title">U</span> <span class="title">y</span>) </span>&#123; <span class="keyword">if</span>(x &lt; y) x = y; &#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">fpow</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> <span class="title">c</span>)</span>&#123;T ans = <span class="number">1</span>;<span class="keyword">while</span>(b)&#123;<span class="keyword">if</span>(b &amp; <span class="number">1</span>)ans = <span class="number">1</span>ll * ans * a % c; a = <span class="number">1</span>ll * a * a % c;b &gt;&gt;= <span class="number">1</span>;&#125;<span class="keyword">return</span> ans;&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">fpow</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>)</span>&#123;T ans = <span class="number">1</span>;<span class="keyword">while</span>(b)&#123;<span class="keyword">if</span>(b &amp; <span class="number">1</span>)ans = <span class="number">1</span>ll * ans * a;a = <span class="number">1</span>ll * a * a;b &gt;&gt;= <span class="number">1</span>;&#125; <span class="keyword">return</span> ans;&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">gcd</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) </span>&#123;<span class="keyword">if</span>(!b) <span class="keyword">return</span> a;<span class="keyword">return</span> gcd(b, a % b);&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">lcm</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) </span>&#123;<span class="keyword">return</span> a / gcd(a, b) * b;&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">Exgcd</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> &amp;<span class="title">x</span>, <span class="title">T</span> &amp;<span class="title">y</span>) </span>&#123;<span class="keyword">if</span>(b == <span class="number">0</span>)&#123;x = <span class="number">1</span>;y = <span class="number">0</span>;<span class="keyword">return</span>;&#125;Exgcd(b, a % b, x, y);T tp = x;x = y;y = tp - a / b * y;&#125;</span><br><span class="line">#define rdi rd&lt;int&gt;</span><br><span class="line">#define rdl rd&lt;LL&gt;</span><br><span class="line">#define N 100005</span><br><span class="line">int v[N], rnd[N], siz[N], son[N][<span class="number">2</span>];</span><br><span class="line">int tot;</span><br><span class="line">int root, x, y, z;</span><br><span class="line">int New(int w) &#123;</span><br><span class="line">    v[++tot] = w;</span><br><span class="line">    siz[tot] = <span class="number">1</span>;</span><br><span class="line">    rnd[tot] = rand();</span><br><span class="line">    <span class="keyword">return</span> tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> update(int p) &#123;</span><br><span class="line">    siz[p] = siz[son[p][<span class="number">0</span>]] + siz[son[p][<span class="number">1</span>]] + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> Split(int p, int k, int &amp;x, int &amp;y) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!p) &#123;</span><br><span class="line">        x = y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (v[p] &lt;= k) &#123; <span class="comment">//权值版</span></span><br><span class="line">        x = p;</span><br><span class="line">        Split(son[p][<span class="number">1</span>], k, son[p][<span class="number">1</span>], y);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        y = p;</span><br><span class="line">        Split(son[p][<span class="number">0</span>], k, x, son[p][<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    if (k &lt;= siz[son[p][0]]) &#123; //Siz版</span></span><br><span class="line"><span class="comment">        y = p;</span></span><br><span class="line"><span class="comment">        Split(son[p][0], k, x, son[p][0]);</span></span><br><span class="line"><span class="comment">    &#125; else &#123;</span></span><br><span class="line"><span class="comment">        x = p;</span></span><br><span class="line"><span class="comment">        Split(son[p][1], k - siz[son[p][0]] - 1, son[p][1], y);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    update(p);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">int Mergy(int x, int y) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!x || !y) <span class="keyword">return</span> x | y;</span><br><span class="line">    <span class="keyword">if</span> (rnd[x] &lt; rnd[y]) &#123;</span><br><span class="line">        son[x][<span class="number">1</span>] = Mergy(son[x][<span class="number">1</span>], y);</span><br><span class="line">        update(x);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        son[y][<span class="number">0</span>] = Mergy(x, son[y][<span class="number">0</span>]);</span><br><span class="line">        update(y);</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int kth(int p, int k) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!p) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (k &lt;= siz[son[p][<span class="number">0</span>]]) <span class="keyword">return</span> kth(son[p][<span class="number">0</span>], k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (k == siz[son[p][<span class="number">0</span>]] + <span class="number">1</span>) <span class="keyword">return</span> v[p];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> kth(son[p][<span class="number">1</span>], k - siz[son[p][<span class="number">0</span>]] - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">    int n = rdi();</span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">1</span> ; i &lt;= n ; i++ ) &#123;</span><br><span class="line">        int op = rdi(), t = rdi();</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">            Split(root, t, x, y);</span><br><span class="line">            root = Mergy(Mergy(x, New(t)), y);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>) &#123;</span><br><span class="line">            Split(root, t, x, z);</span><br><span class="line">            Split(x, t - <span class="number">1</span>, x, y);</span><br><span class="line">            y = Mergy(son[y][<span class="number">0</span>], son[y][<span class="number">1</span>]);</span><br><span class="line">            root = Mergy(Mergy(x, y), z);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">3</span>) &#123;</span><br><span class="line">            Split(root, t - <span class="number">1</span>, x, y);</span><br><span class="line">            writeln(siz[x] + <span class="number">1</span>);</span><br><span class="line">            root = Mergy(x, y);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">4</span>) &#123;</span><br><span class="line">            writeln(kth(root, t));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">5</span>) &#123;</span><br><span class="line">            Split(root, t - <span class="number">1</span>, x, y);</span><br><span class="line">            writeln(kth(x, siz[x]));</span><br><span class="line">            root = Mergy(x, y);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">6</span>) &#123;</span><br><span class="line">            Split(root, t, x, y);</span><br><span class="line">            writeln(kth(y, <span class="number">1</span>));</span><br><span class="line">            root = Mergy(x, y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="3-替罪羊树-Scapegoat-Tree"><a href="#3-替罪羊树-Scapegoat-Tree" class="headerlink" title="3.替罪羊树(Scapegoat Tree)"></a>3.替罪羊树(Scapegoat Tree)</h2><p>代码量小，随机数据下非常快，然而还是不如RBT(RBT永远滴神)</p>
<p>不能分裂合并，可以部分可持久化</p>
<p>但是在卡链的数据或者构造数据下表现就一般了</p>
<p><del>但是ACM赛制下被卡换种写法就好了吧？</del></p>
<p>—————————————————————————————<br>大部分依赖旋转（单旋或双旋）来维持平衡，但是有一些平衡树是不依赖于旋转操作。替罪羊树便是其中一种。</p>
<p>替罪羊树基于一种暴力重构的操作来保证平衡，具体来说，就是定义一个平衡因子$alpha$，当某个节点$p$的某棵子树的<br>$siz[p] * alpha &lt;= max(siz[son[p][0]], siz[son[p][1]]))$<br>便将这棵以$p$为根的子树拍扁重构</p>
<p><del>下面代码写的是vad(valid)代替了sig</del></p>
<p><del>显然，alpha的取值范围在0.5-1的范围内，一般取0.7或0.8较为合适。太大的$alpha$会使得树变深，太小则会引起过多的重构</del><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;iomanip&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long ll;</span><br><span class="line">typedef long long LL;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">rd</span>()</span>&#123;T x = <span class="number">0</span>;ll f = <span class="number">1</span>; char c = getchar();<span class="keyword">while</span>(c &gt; <span class="string">'9'</span> || c &lt; <span class="string">'0'</span>) f = c == <span class="string">'-'</span> ? <span class="number">-1</span> : <span class="number">1</span>, c = getchar();<span class="keyword">while</span>(c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + c - <span class="number">48</span>, c = getchar();<span class="keyword">return</span> x * f;&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">write</span>(<span class="title">T</span> <span class="title">x</span>)</span>&#123;<span class="keyword">if</span>(x &lt; <span class="number">0</span>)&#123;putchar(<span class="string">'-'</span>), write(-x);<span class="keyword">return</span>;&#125;<span class="keyword">if</span>(x &gt;= <span class="number">10</span>)write(x / <span class="number">10</span>);putchar(x % <span class="number">10</span> + <span class="number">48</span>);&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">write_</span>(<span class="title">T</span> <span class="title">x</span>)</span>&#123;<span class="keyword">if</span>(x &lt; <span class="number">0</span>)&#123;putchar(<span class="string">'-'</span>), write(-x);putchar(<span class="string">' '</span>);<span class="keyword">return</span>;&#125;<span class="keyword">if</span>(x &gt;= <span class="number">10</span>)write(x / <span class="number">10</span>);putchar(x % <span class="number">10</span> + <span class="number">48</span>);putchar(<span class="string">' '</span>);&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">writeln</span>(<span class="title">T</span> <span class="title">x</span>)</span>&#123;<span class="keyword">if</span>(x &lt; <span class="number">0</span>)&#123;putchar(<span class="string">'-'</span>), write(-x);putchar(<span class="string">'\n'</span>);<span class="keyword">return</span>;&#125;<span class="keyword">if</span>(x &gt;= <span class="number">10</span>)write(x / <span class="number">10</span>);putchar(x % <span class="number">10</span> + <span class="number">48</span>);putchar(<span class="string">'\n'</span>);&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">min</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> <span class="title">c</span>)</span>&#123;<span class="keyword">return</span> min(min(a, b), c);&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">max</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> <span class="title">c</span>)</span>&#123;<span class="keyword">return</span> max(max(a, b), c);&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">min</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> <span class="title">c</span>, <span class="title">T</span> <span class="title">d</span>)</span>&#123;<span class="keyword">return</span> min(min(a, b), min(c, d));&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">max</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> <span class="title">c</span>, <span class="title">T</span> <span class="title">d</span>)</span>&#123;<span class="keyword">return</span> max(max(a, b), max(c, d));&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">fpow</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> <span class="title">c</span>)</span>&#123;T ans = <span class="number">1</span>;<span class="keyword">while</span>(b)&#123;<span class="keyword">if</span>(b &amp; <span class="number">1</span>)ans = <span class="number">1</span>ll * ans * a % c; a = <span class="number">1</span>ll * a * a % c;b &gt;&gt;= <span class="number">1</span>;&#125;<span class="keyword">return</span> ans;&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">fpow</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>)</span>&#123;T ans = <span class="number">1</span>;<span class="keyword">while</span>(b)&#123;<span class="keyword">if</span>(b &amp; <span class="number">1</span>)ans = <span class="number">1</span>ll * ans * a;a = <span class="number">1</span>ll * a * a;b &gt;&gt;= <span class="number">1</span>;&#125; <span class="keyword">return</span> ans;&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">gcd</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) </span>&#123;<span class="keyword">if</span>(!b) <span class="keyword">return</span> a;<span class="keyword">return</span> gcd(b, a % b);&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">lcm</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) </span>&#123;<span class="keyword">return</span> a / gcd(a, b) * b;&#125;</span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">Exgcd</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> &amp;<span class="title">x</span>, <span class="title">T</span> &amp;<span class="title">y</span>) </span>&#123;<span class="keyword">if</span>(b == <span class="number">0</span>)&#123;x = <span class="number">1</span>;y = <span class="number">0</span>;<span class="keyword">return</span>;&#125;Exgcd(b, a % b, x, y);T tp = x;x = y;y = tp - a / b * y;&#125;</span><br><span class="line">#define rdi rd&lt;int&gt;</span><br><span class="line">#define rdl rd&lt;LL&gt;</span><br><span class="line">#define N 2000050</span><br><span class="line">int vad[N], son[N][<span class="number">2</span>], exist[N], val[N], tot[N];</span><br><span class="line">int memory[N], cur[N];</span><br><span class="line">int root, to_rebuild, poi, pool;</span><br><span class="line"><span class="keyword">const</span> double alpha = <span class="number">0.8</span>;</span><br><span class="line">bool isBad(int p) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((double)vad[p] * alpha &lt;= (double) max(vad[son[p][<span class="number">0</span>]], vad[son[p][<span class="number">1</span>]])) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> dfs(int p) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!p) <span class="keyword">return</span>;</span><br><span class="line">    dfs(son[p][<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span> (exist[p]) cur[++poi] = p;</span><br><span class="line">    <span class="keyword">else</span> memory[++pool] = p;</span><br><span class="line">    dfs(son[p][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> build(int l, int r, int &amp;p) &#123;</span><br><span class="line">    int mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    p = cur[mid];</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        son[p][<span class="number">0</span>] = son[p][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        tot[p] = vad[p] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (l &lt; mid) build(l, mid - <span class="number">1</span>, son[p][<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">else</span> son[p][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    build(mid + <span class="number">1</span>, r, son[p][<span class="number">1</span>]);</span><br><span class="line">    tot[p] = tot[son[p][<span class="number">0</span>]] + tot[son[p][<span class="number">1</span>]] + <span class="number">1</span>;</span><br><span class="line">    vad[p] = vad[son[p][<span class="number">0</span>]] + vad[son[p][<span class="number">1</span>]] + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> rebuild(int &amp;p) &#123;</span><br><span class="line">    poi = <span class="number">0</span>;</span><br><span class="line">    dfs(p);</span><br><span class="line">    <span class="keyword">if</span> (poi) build(<span class="number">1</span>, poi, p);</span><br><span class="line">    <span class="keyword">else</span> p = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">int find_rank(int x) &#123;</span><br><span class="line">    int p = root;</span><br><span class="line">    int ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (p) &#123;</span><br><span class="line">        <span class="keyword">if</span> (val[p] &gt;= x) p = son[p][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            ans += vad[son[p][<span class="number">0</span>]] + exist[p];</span><br><span class="line">            p = son[p][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">int kth(int p, int k) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!p) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (vad[son[p][<span class="number">0</span>]] &gt;= k) kth(son[p][<span class="number">0</span>], k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (vad[son[p][<span class="number">0</span>]] + exist[p] &lt; k) <span class="keyword">return</span> kth(son[p][<span class="number">1</span>], k - vad[son[p][<span class="number">0</span>]] - exist[p]);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> val[p];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> ins(int &amp;p, int x) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!p) &#123;</span><br><span class="line">        p = memory[pool--];</span><br><span class="line">        val[p] = x;</span><br><span class="line">        exist[p] = tot[p] = vad[p] = <span class="number">1</span>;</span><br><span class="line">        son[p][<span class="number">0</span>] = son[p][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        tot[p] ++, vad[p] ++;</span><br><span class="line">        <span class="keyword">if</span> (val[p] &gt;= x) ins(son[p][<span class="number">0</span>], x);</span><br><span class="line">        <span class="keyword">else</span> ins(son[p][<span class="number">1</span>], x);</span><br><span class="line">        <span class="keyword">if</span>(isBad(p)) rebuild(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> Del_pos(int &amp;p, int tar) &#123;</span><br><span class="line">    <span class="keyword">if</span> (exist[p] &amp;&amp; vad[son[p][<span class="number">0</span>]] + <span class="number">1</span> == tar) &#123;</span><br><span class="line">        exist[p] = <span class="number">0</span>;</span><br><span class="line">        vad[p] --;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    vad[p] --;</span><br><span class="line">    <span class="keyword">if</span> (vad[son[p][<span class="number">0</span>]] + exist[p] &gt;= tar) Del_pos(son[p][<span class="number">0</span>], tar);</span><br><span class="line">    <span class="keyword">else</span> Del_pos(son[p][<span class="number">1</span>], tar - vad[son[p][<span class="number">0</span>]] - exist[p]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> Del_val(int x) &#123;</span><br><span class="line">    Del_pos(root, find_rank(x));</span><br><span class="line">    <span class="keyword">if</span> ((double)tot[root] * alpha &gt; vad[root]) rebuild(root);</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">2000000</span> ; i &gt;= <span class="number">1</span> ; i--) memory[++pool] = i;</span><br><span class="line">    int m = rdi();</span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">1</span>; i &lt;= m ; i++ ) &#123;</span><br><span class="line">        int op = rdi(), x = rdi();</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>) ins(root, x);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>) Del_val(x);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">3</span>) writeln(find_rank(x));</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">4</span>) writeln(kth(root, x));</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">5</span>) writeln(kth(root, find_rank(x) - <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">6</span>) writeln(kth(root, find_rank(x + <span class="number">1</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="4-Splay"><a href="#4-Splay" class="headerlink" title="4.Splay"></a>4.Splay</h2><p>代码量一般，速度非常慢</p>
<p>可以分裂合并，不能可持久化</p>
<p>大多数人学的平衡树</p>
<h2 id="5-Leftytree-Tree"><a href="#5-Leftytree-Tree" class="headerlink" title="5.Leftytree Tree"></a>5.Leftytree Tree</h2><p>咕咕咕</p>
<h2 id="6-权值线段树"><a href="#6-权值线段树" class="headerlink" title="6.权值线段树"></a>6.权值线段树</h2><p>效率较高，代码量较低</p>
<p>可以分裂合并，可持久化</p>
<p>但是空间较大</p>
<p>为了解决空间问题可以动态开点（多log）或者离线离散化</p>
<h2 id="7-排序向量树"><a href="#7-排序向量树" class="headerlink" title="7.排序向量树"></a>7.排序向量树</h2><p><del>居然能这样做我是真的没想到O(nm)</del></p>
<p>非常好写</p>
<p>但是因为常数问题所以可以过题</p>
<p>查kth是O(1)的</p>
<h2 id="8-AVL-Tree"><a href="#8-AVL-Tree" class="headerlink" title="8.AVL Tree"></a>8.AVL Tree</h2><p>代码量较大，速度一般</p>
<p>如果修改少查询多的话AVL会很有优势，因为AVL的查询非常快</p>
<p>可以分裂合并，可持久化，<del>但是分裂合并不怎么好写</del></p>
<p><del>好像没什么人会？</del></p>
<h2 id="9-B树"><a href="#9-B树" class="headerlink" title="9.B树"></a>9.B树</h2><p>不会</p>
<h2 id="……想到再写吧"><a href="#……想到再写吧" class="headerlink" title="……想到再写吧"></a>……想到再写吧</h2>]]></content>
  </entry>
</search>
